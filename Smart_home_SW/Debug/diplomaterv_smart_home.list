
diplomaterv_smart_home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004070  08004070  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004078  08004078  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004078  08004078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000402c  2000000c  0800408c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004038  0800408c  00024038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107e0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002681  00000000  00000000  0003081c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00032ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de8  00000000  00000000  00033dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000234cb  00000000  00000000  00034ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4fb  00000000  00000000  00058073  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8d3c  00000000  00000000  0006456e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d2aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df0  00000000  00000000  0013d328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003fb8 	.word	0x08003fb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08003fb8 	.word	0x08003fb8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <HAL_Init+0x40>)
 800051a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800051e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <HAL_Init+0x40>)
 8000526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_Init+0x40>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_Init+0x40>)
 8000532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f8d8 	bl	80006ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053e:	2000      	movs	r0, #0
 8000540:	f003 fc32 	bl	8003da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000544:	f003 fbee 	bl	8003d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_IncTick+0x20>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_IncTick+0x24>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4413      	add	r3, r2
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_IncTick+0x24>)
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000000 	.word	0x20000000
 8000578:	20003fc8 	.word	0x20003fc8

0800057c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <HAL_GetTick+0x14>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20003fc8 	.word	0x20003fc8

08000594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <__NVIC_SetPriorityGrouping+0x44>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b0:	4013      	ands	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <__NVIC_SetPriorityGrouping+0x44>)
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	60d3      	str	r3, [r2, #12]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <__NVIC_GetPriorityGrouping+0x18>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	f003 0307 	and.w	r3, r3, #7
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	db0b      	blt.n	8000622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 021f 	and.w	r2, r3, #31
 8000610:	4907      	ldr	r1, [pc, #28]	; (8000630 <__NVIC_EnableIRQ+0x38>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	2001      	movs	r0, #1
 800061a:	fa00 f202 	lsl.w	r2, r0, r2
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000e100 	.word	0xe000e100

08000634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000644:	2b00      	cmp	r3, #0
 8000646:	db0a      	blt.n	800065e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	b2da      	uxtb	r2, r3
 800064c:	490c      	ldr	r1, [pc, #48]	; (8000680 <__NVIC_SetPriority+0x4c>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	0112      	lsls	r2, r2, #4
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	440b      	add	r3, r1
 8000658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800065c:	e00a      	b.n	8000674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4908      	ldr	r1, [pc, #32]	; (8000684 <__NVIC_SetPriority+0x50>)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	3b04      	subs	r3, #4
 800066c:	0112      	lsls	r2, r2, #4
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	440b      	add	r3, r1
 8000672:	761a      	strb	r2, [r3, #24]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000e100 	.word	0xe000e100
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000688:	b480      	push	{r7}
 800068a:	b089      	sub	sp, #36	; 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800069c:	69fb      	ldr	r3, [r7, #28]
 800069e:	f1c3 0307 	rsb	r3, r3, #7
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	bf28      	it	cs
 80006a6:	2304      	movcs	r3, #4
 80006a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3304      	adds	r3, #4
 80006ae:	2b06      	cmp	r3, #6
 80006b0:	d902      	bls.n	80006b8 <NVIC_EncodePriority+0x30>
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	3b03      	subs	r3, #3
 80006b6:	e000      	b.n	80006ba <NVIC_EncodePriority+0x32>
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	43da      	mvns	r2, r3
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	401a      	ands	r2, r3
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	fa01 f303 	lsl.w	r3, r1, r3
 80006da:	43d9      	mvns	r1, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	4313      	orrs	r3, r2
         );
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3724      	adds	r7, #36	; 0x24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff4c 	bl	8000594 <__NVIC_SetPriorityGrouping>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000716:	f7ff ff61 	bl	80005dc <__NVIC_GetPriorityGrouping>
 800071a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	68b9      	ldr	r1, [r7, #8]
 8000720:	6978      	ldr	r0, [r7, #20]
 8000722:	f7ff ffb1 	bl	8000688 <NVIC_EncodePriority>
 8000726:	4602      	mov	r2, r0
 8000728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff80 	bl	8000634 <__NVIC_SetPriority>
}
 8000734:	bf00      	nop
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff54 	bl	80005f8 <__NVIC_EnableIRQ>
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
 8000772:	e165      	b.n	8000a40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000774:	2201      	movs	r2, #1
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	697a      	ldr	r2, [r7, #20]
 8000784:	4013      	ands	r3, r2
 8000786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	429a      	cmp	r2, r3
 800078e:	f040 8154 	bne.w	8000a3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d003      	beq.n	80007a2 <HAL_GPIO_Init+0x4a>
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	2b12      	cmp	r3, #18
 80007a0:	d123      	bne.n	80007ea <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	08da      	lsrs	r2, r3, #3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3208      	adds	r2, #8
 80007aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	220f      	movs	r2, #15
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43db      	mvns	r3, r3
 80007c0:	69ba      	ldr	r2, [r7, #24]
 80007c2:	4013      	ands	r3, r2
 80007c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	691a      	ldr	r2, [r3, #16]
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	f003 0307 	and.w	r3, r3, #7
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	69ba      	ldr	r2, [r7, #24]
 80007d8:	4313      	orrs	r3, r2
 80007da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	08da      	lsrs	r2, r3, #3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3208      	adds	r2, #8
 80007e4:	69b9      	ldr	r1, [r7, #24]
 80007e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	2203      	movs	r2, #3
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43db      	mvns	r3, r3
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	4013      	ands	r3, r2
 8000800:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f003 0203 	and.w	r2, r3, #3
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	69ba      	ldr	r2, [r7, #24]
 8000814:	4313      	orrs	r3, r2
 8000816:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d00b      	beq.n	800083e <HAL_GPIO_Init+0xe6>
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d007      	beq.n	800083e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000832:	2b11      	cmp	r3, #17
 8000834:	d003      	beq.n	800083e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b12      	cmp	r3, #18
 800083c:	d130      	bne.n	80008a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	2203      	movs	r2, #3
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	4013      	ands	r3, r2
 8000854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	68da      	ldr	r2, [r3, #12]
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	4313      	orrs	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000874:	2201      	movs	r2, #1
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4013      	ands	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	091b      	lsrs	r3, r3, #4
 800088a:	f003 0201 	and.w	r2, r3, #1
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	4313      	orrs	r3, r2
 8000898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	2203      	movs	r2, #3
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4013      	ands	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d8:	2b00      	cmp	r3, #0
 80008da:	f000 80ae 	beq.w	8000a3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b5c      	ldr	r3, [pc, #368]	; (8000a54 <HAL_GPIO_Init+0x2fc>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a5b      	ldr	r2, [pc, #364]	; (8000a54 <HAL_GPIO_Init+0x2fc>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b59      	ldr	r3, [pc, #356]	; (8000a54 <HAL_GPIO_Init+0x2fc>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008fa:	4a57      	ldr	r2, [pc, #348]	; (8000a58 <HAL_GPIO_Init+0x300>)
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	089b      	lsrs	r3, r3, #2
 8000900:	3302      	adds	r3, #2
 8000902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f003 0303 	and.w	r3, r3, #3
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	220f      	movs	r2, #15
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	4013      	ands	r3, r2
 800091c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a4e      	ldr	r2, [pc, #312]	; (8000a5c <HAL_GPIO_Init+0x304>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d025      	beq.n	8000972 <HAL_GPIO_Init+0x21a>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a4d      	ldr	r2, [pc, #308]	; (8000a60 <HAL_GPIO_Init+0x308>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d01f      	beq.n	800096e <HAL_GPIO_Init+0x216>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a4c      	ldr	r2, [pc, #304]	; (8000a64 <HAL_GPIO_Init+0x30c>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d019      	beq.n	800096a <HAL_GPIO_Init+0x212>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a4b      	ldr	r2, [pc, #300]	; (8000a68 <HAL_GPIO_Init+0x310>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d013      	beq.n	8000966 <HAL_GPIO_Init+0x20e>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a4a      	ldr	r2, [pc, #296]	; (8000a6c <HAL_GPIO_Init+0x314>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d00d      	beq.n	8000962 <HAL_GPIO_Init+0x20a>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a49      	ldr	r2, [pc, #292]	; (8000a70 <HAL_GPIO_Init+0x318>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d007      	beq.n	800095e <HAL_GPIO_Init+0x206>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a48      	ldr	r2, [pc, #288]	; (8000a74 <HAL_GPIO_Init+0x31c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d101      	bne.n	800095a <HAL_GPIO_Init+0x202>
 8000956:	2306      	movs	r3, #6
 8000958:	e00c      	b.n	8000974 <HAL_GPIO_Init+0x21c>
 800095a:	2307      	movs	r3, #7
 800095c:	e00a      	b.n	8000974 <HAL_GPIO_Init+0x21c>
 800095e:	2305      	movs	r3, #5
 8000960:	e008      	b.n	8000974 <HAL_GPIO_Init+0x21c>
 8000962:	2304      	movs	r3, #4
 8000964:	e006      	b.n	8000974 <HAL_GPIO_Init+0x21c>
 8000966:	2303      	movs	r3, #3
 8000968:	e004      	b.n	8000974 <HAL_GPIO_Init+0x21c>
 800096a:	2302      	movs	r3, #2
 800096c:	e002      	b.n	8000974 <HAL_GPIO_Init+0x21c>
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <HAL_GPIO_Init+0x21c>
 8000972:	2300      	movs	r3, #0
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	f002 0203 	and.w	r2, r2, #3
 800097a:	0092      	lsls	r2, r2, #2
 800097c:	4093      	lsls	r3, r2
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4313      	orrs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000984:	4934      	ldr	r1, [pc, #208]	; (8000a58 <HAL_GPIO_Init+0x300>)
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	3302      	adds	r3, #2
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000992:	4b39      	ldr	r3, [pc, #228]	; (8000a78 <HAL_GPIO_Init+0x320>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d003      	beq.n	80009b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009b6:	4a30      	ldr	r2, [pc, #192]	; (8000a78 <HAL_GPIO_Init+0x320>)
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009bc:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <HAL_GPIO_Init+0x320>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	43db      	mvns	r3, r3
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	4013      	ands	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009e0:	4a25      	ldr	r2, [pc, #148]	; (8000a78 <HAL_GPIO_Init+0x320>)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009e6:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <HAL_GPIO_Init+0x320>)
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a0a:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <HAL_GPIO_Init+0x320>)
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_GPIO_Init+0x320>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d003      	beq.n	8000a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a34:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <HAL_GPIO_Init+0x320>)
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	2b0f      	cmp	r3, #15
 8000a44:	f67f ae96 	bls.w	8000774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3724      	adds	r7, #36	; 0x24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40013800 	.word	0x40013800
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40021400 	.word	0x40021400
 8000a74:	40021800 	.word	0x40021800
 8000a78:	40013c00 	.word	0x40013c00

08000a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	807b      	strh	r3, [r7, #2]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a8c:	787b      	ldrb	r3, [r7, #1]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a92:	887a      	ldrh	r2, [r7, #2]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a98:	e003      	b.n	8000aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	041a      	lsls	r2, r3, #16
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	619a      	str	r2, [r3, #24]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e0ca      	b.n	8000c5a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ac4:	4b67      	ldr	r3, [pc, #412]	; (8000c64 <HAL_RCC_ClockConfig+0x1b4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d90c      	bls.n	8000aec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ad2:	4b64      	ldr	r3, [pc, #400]	; (8000c64 <HAL_RCC_ClockConfig+0x1b4>)
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ada:	4b62      	ldr	r3, [pc, #392]	; (8000c64 <HAL_RCC_ClockConfig+0x1b4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d001      	beq.n	8000aec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e0b6      	b.n	8000c5a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d020      	beq.n	8000b3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d005      	beq.n	8000b10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b04:	4b58      	ldr	r3, [pc, #352]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	4a57      	ldr	r2, [pc, #348]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d005      	beq.n	8000b28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b1c:	4b52      	ldr	r3, [pc, #328]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4a51      	ldr	r2, [pc, #324]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b28:	4b4f      	ldr	r3, [pc, #316]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	494c      	ldr	r1, [pc, #304]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000b36:	4313      	orrs	r3, r2
 8000b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d044      	beq.n	8000bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d107      	bne.n	8000b5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d119      	bne.n	8000b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e07d      	b.n	8000c5a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d003      	beq.n	8000b6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d107      	bne.n	8000b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b6e:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d109      	bne.n	8000b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e06d      	b.n	8000c5a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b7e:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e065      	b.n	8000c5a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b8e:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f023 0203 	bic.w	r2, r3, #3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	4933      	ldr	r1, [pc, #204]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ba0:	f7ff fcec 	bl	800057c <HAL_GetTick>
 8000ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ba6:	e00a      	b.n	8000bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ba8:	f7ff fce8 	bl	800057c <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e04d      	b.n	8000c5a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 020c 	and.w	r2, r3, #12
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d1eb      	bne.n	8000ba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <HAL_RCC_ClockConfig+0x1b4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 030f 	and.w	r3, r3, #15
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d20c      	bcs.n	8000bf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <HAL_RCC_ClockConfig+0x1b4>)
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_RCC_ClockConfig+0x1b4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d001      	beq.n	8000bf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e030      	b.n	8000c5a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d008      	beq.n	8000c16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	4915      	ldr	r1, [pc, #84]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000c12:	4313      	orrs	r3, r2
 8000c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d009      	beq.n	8000c36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	490d      	ldr	r1, [pc, #52]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000c32:	4313      	orrs	r3, r2
 8000c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c36:	f000 fb99 	bl	800136c <HAL_RCC_GetSysClockFreq>
 8000c3a:	4601      	mov	r1, r0
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_RCC_ClockConfig+0x1b8>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	091b      	lsrs	r3, r3, #4
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <HAL_RCC_ClockConfig+0x1bc>)
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_RCC_ClockConfig+0x1c0>)
 8000c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f003 f8a8 	bl	8003da8 <HAL_InitTick>

  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	08004058 	.word	0x08004058
 8000c70:	20000008 	.word	0x20000008

08000c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008

08000c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000c90:	f7ff fff0 	bl	8000c74 <HAL_RCC_GetHCLKFreq>
 8000c94:	4601      	mov	r1, r0
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	0b5b      	lsrs	r3, r3, #13
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	4a03      	ldr	r2, [pc, #12]	; (8000cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	08004068 	.word	0x08004068

08000cb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_RCC_GetClockConfig+0x5c>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f003 0203 	and.w	r2, r3, #3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_RCC_GetClockConfig+0x5c>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_RCC_GetClockConfig+0x5c>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_RCC_GetClockConfig+0x5c>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <HAL_RCC_GetClockConfig+0x60>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 020f 	and.w	r2, r3, #15
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	601a      	str	r2, [r3, #0]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08c      	sub	sp, #48	; 0x30
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d010      	beq.n	8000d72 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8000d50:	4b6f      	ldr	r3, [pc, #444]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d56:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d5e:	496c      	ldr	r1, [pc, #432]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000d60:	4313      	orrs	r3, r2
 8000d62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d010      	beq.n	8000da0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8000d7e:	4b64      	ldr	r3, [pc, #400]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d84:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d8c:	4960      	ldr	r1, [pc, #384]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d101      	bne.n	8000da0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d017      	beq.n	8000ddc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000dac:	4b58      	ldr	r3, [pc, #352]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4955      	ldr	r1, [pc, #340]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000dca:	d101      	bne.n	8000dd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d017      	beq.n	8000e18 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000de8:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df6:	4946      	ldr	r1, [pc, #280]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e06:	d101      	bne.n	8000e0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0320 	and.w	r3, r3, #32
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 808a 	beq.w	8000f3a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a38      	ldr	r2, [pc, #224]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000e42:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a33      	ldr	r2, [pc, #204]	; (8000f14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e4e:	f7ff fb95 	bl	800057c <HAL_GetTick>
 8000e52:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000e54:	e008      	b.n	8000e68 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e56:	f7ff fb91 	bl	800057c <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e278      	b.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000e7c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d02f      	beq.n	8000ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000e8c:	6a3a      	ldr	r2, [r7, #32]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d028      	beq.n	8000ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e9a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8000ea8:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d114      	bne.n	8000ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8000eba:	f7ff fb5f 	bl	800057c <HAL_GetTick>
 8000ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	e00a      	b.n	8000ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec2:	f7ff fb5b 	bl	800057c <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e240      	b.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0ee      	beq.n	8000ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000ef0:	d114      	bne.n	8000f1c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f06:	4902      	ldr	r1, [pc, #8]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	608b      	str	r3, [r1, #8]
 8000f0c:	e00c      	b.n	8000f28 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000
 8000f18:	42470e40 	.word	0x42470e40
 8000f1c:	4b4a      	ldr	r3, [pc, #296]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4a49      	ldr	r2, [pc, #292]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000f22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8000f26:	6093      	str	r3, [r2, #8]
 8000f28:	4b47      	ldr	r3, [pc, #284]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000f2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f34:	4944      	ldr	r1, [pc, #272]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8000f4c:	4b3f      	ldr	r3, [pc, #252]	; (800104c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8000f4e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00a      	beq.n	8000f72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4937      	ldr	r1, [pc, #220]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00a      	beq.n	8000f94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000f7e:	4b32      	ldr	r3, [pc, #200]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f84:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8c:	492e      	ldr	r1, [pc, #184]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d011      	beq.n	8000fc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fae:	4926      	ldr	r1, [pc, #152]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000fbe:	d101      	bne.n	8000fc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00a      	beq.n	8000fe6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	491a      	ldr	r1, [pc, #104]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d011      	beq.n	8001016 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ff8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001000:	4911      	ldr	r1, [pc, #68]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001002:	4313      	orrs	r3, r2
 8001004:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800100c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001010:	d101      	bne.n	8001016 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001012:	2301      	movs	r3, #1
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	2b01      	cmp	r3, #1
 800101a:	d005      	beq.n	8001028 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001024:	f040 80ff 	bne.w	8001226 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800102e:	f7ff faa5 	bl	800057c <HAL_GetTick>
 8001032:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001034:	e00e      	b.n	8001054 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001036:	f7ff faa1 	bl	800057c <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d907      	bls.n	8001054 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e188      	b.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001048:	40023800 	.word	0x40023800
 800104c:	424711e0 	.word	0x424711e0
 8001050:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001054:	4b7e      	ldr	r3, [pc, #504]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1ea      	bne.n	8001036 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001070:	2b00      	cmp	r3, #0
 8001072:	d009      	beq.n	8001088 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800107c:	2b00      	cmp	r3, #0
 800107e:	d028      	beq.n	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d124      	bne.n	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001088:	4b71      	ldr	r3, [pc, #452]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800108a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800108e:	0c1b      	lsrs	r3, r3, #16
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	3301      	adds	r3, #1
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800109a:	4b6d      	ldr	r3, [pc, #436]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800109c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010a0:	0e1b      	lsrs	r3, r3, #24
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	019b      	lsls	r3, r3, #6
 80010b2:	431a      	orrs	r2, r3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	085b      	lsrs	r3, r3, #1
 80010b8:	3b01      	subs	r3, #1
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	431a      	orrs	r2, r3
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	061b      	lsls	r3, r3, #24
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	071b      	lsls	r3, r3, #28
 80010ca:	4961      	ldr	r1, [pc, #388]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010e6:	d00a      	beq.n	80010fe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d035      	beq.n	8001160 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010fc:	d130      	bne.n	8001160 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80010fe:	4b54      	ldr	r3, [pc, #336]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	3301      	adds	r3, #1
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001110:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001116:	0f1b      	lsrs	r3, r3, #28
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	019b      	lsls	r3, r3, #6
 8001128:	431a      	orrs	r2, r3
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	085b      	lsrs	r3, r3, #1
 800112e:	3b01      	subs	r3, #1
 8001130:	041b      	lsls	r3, r3, #16
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	061b      	lsls	r3, r3, #24
 800113a:	431a      	orrs	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	071b      	lsls	r3, r3, #28
 8001140:	4943      	ldr	r1, [pc, #268]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001142:	4313      	orrs	r3, r2
 8001144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001148:	4b41      	ldr	r3, [pc, #260]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800114a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800114e:	f023 021f 	bic.w	r2, r3, #31
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	3b01      	subs	r3, #1
 8001158:	493d      	ldr	r1, [pc, #244]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800115a:	4313      	orrs	r3, r2
 800115c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001168:	2b00      	cmp	r3, #0
 800116a:	d029      	beq.n	80011c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001174:	d124      	bne.n	80011c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001176:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800117c:	0c1b      	lsrs	r3, r3, #16
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	3301      	adds	r3, #1
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001188:	4b31      	ldr	r3, [pc, #196]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800118a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800118e:	0f1b      	lsrs	r3, r3, #28
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	019b      	lsls	r3, r3, #6
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	085b      	lsrs	r3, r3, #1
 80011a8:	3b01      	subs	r3, #1
 80011aa:	041b      	lsls	r3, r3, #16
 80011ac:	431a      	orrs	r2, r3
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	061b      	lsls	r3, r3, #24
 80011b2:	431a      	orrs	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	071b      	lsls	r3, r3, #28
 80011b8:	4925      	ldr	r1, [pc, #148]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d016      	beq.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	019b      	lsls	r3, r3, #6
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	085b      	lsrs	r3, r3, #1
 80011de:	3b01      	subs	r3, #1
 80011e0:	041b      	lsls	r3, r3, #16
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	061b      	lsls	r3, r3, #24
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	071b      	lsls	r3, r3, #28
 80011f2:	4917      	ldr	r1, [pc, #92]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001200:	f7ff f9bc 	bl	800057c <HAL_GetTick>
 8001204:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001208:	f7ff f9b8 	bl	800057c <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e09f      	b.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001228:	2b01      	cmp	r3, #1
 800122a:	f040 8095 	bne.w	8001358 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001234:	f7ff f9a2 	bl	800057c <HAL_GetTick>
 8001238:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800123a:	e00f      	b.n	800125c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800123c:	f7ff f99e 	bl	800057c <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d908      	bls.n	800125c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e085      	b.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	42470068 	.word	0x42470068
 8001258:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800125c:	4b41      	ldr	r3, [pc, #260]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001268:	d0e8      	beq.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001286:	2b00      	cmp	r3, #0
 8001288:	d02b      	beq.n	80012e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128e:	2b00      	cmp	r3, #0
 8001290:	d127      	bne.n	80012e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001292:	4b34      	ldr	r3, [pc, #208]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001298:	0c1b      	lsrs	r3, r3, #16
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	3301      	adds	r3, #1
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	431a      	orrs	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	085b      	lsrs	r3, r3, #1
 80012b4:	3b01      	subs	r3, #1
 80012b6:	041b      	lsls	r3, r3, #16
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	061b      	lsls	r3, r3, #24
 80012c0:	4928      	ldr	r1, [pc, #160]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80012ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d6:	3b01      	subs	r3, #1
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	4922      	ldr	r1, [pc, #136]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d01d      	beq.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80012f6:	d118      	bne.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	0e1b      	lsrs	r3, r3, #24
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	019b      	lsls	r3, r3, #6
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	085b      	lsrs	r3, r3, #1
 8001318:	3b01      	subs	r3, #1
 800131a:	041b      	lsls	r3, r3, #16
 800131c:	431a      	orrs	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	061b      	lsls	r3, r3, #24
 8001322:	4910      	ldr	r1, [pc, #64]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001324:	4313      	orrs	r3, r2
 8001326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001330:	f7ff f924 	bl	800057c <HAL_GetTick>
 8001334:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001338:	f7ff f920 	bl	800057c <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e007      	b.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001356:	d1ef      	bne.n	8001338 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	42470070 	.word	0x42470070

0800136c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001386:	4b9f      	ldr	r3, [pc, #636]	; (8001604 <HAL_RCC_GetSysClockFreq+0x298>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b0c      	cmp	r3, #12
 8001390:	f200 8130 	bhi.w	80015f4 <HAL_RCC_GetSysClockFreq+0x288>
 8001394:	a201      	add	r2, pc, #4	; (adr r2, 800139c <HAL_RCC_GetSysClockFreq+0x30>)
 8001396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139a:	bf00      	nop
 800139c:	080013d1 	.word	0x080013d1
 80013a0:	080015f5 	.word	0x080015f5
 80013a4:	080015f5 	.word	0x080015f5
 80013a8:	080015f5 	.word	0x080015f5
 80013ac:	080013d7 	.word	0x080013d7
 80013b0:	080015f5 	.word	0x080015f5
 80013b4:	080015f5 	.word	0x080015f5
 80013b8:	080015f5 	.word	0x080015f5
 80013bc:	080013dd 	.word	0x080013dd
 80013c0:	080015f5 	.word	0x080015f5
 80013c4:	080015f5 	.word	0x080015f5
 80013c8:	080015f5 	.word	0x080015f5
 80013cc:	080014eb 	.word	0x080014eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013d0:	4b8d      	ldr	r3, [pc, #564]	; (8001608 <HAL_RCC_GetSysClockFreq+0x29c>)
 80013d2:	613b      	str	r3, [r7, #16]
       break;
 80013d4:	e111      	b.n	80015fa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013d6:	4b8d      	ldr	r3, [pc, #564]	; (800160c <HAL_RCC_GetSysClockFreq+0x2a0>)
 80013d8:	613b      	str	r3, [r7, #16]
      break;
 80013da:	e10e      	b.n	80015fa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013dc:	4b89      	ldr	r3, [pc, #548]	; (8001604 <HAL_RCC_GetSysClockFreq+0x298>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013e4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013e6:	4b87      	ldr	r3, [pc, #540]	; (8001604 <HAL_RCC_GetSysClockFreq+0x298>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d023      	beq.n	800143a <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f2:	4b84      	ldr	r3, [pc, #528]	; (8001604 <HAL_RCC_GetSysClockFreq+0x298>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	099b      	lsrs	r3, r3, #6
 80013f8:	f04f 0400 	mov.w	r4, #0
 80013fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	ea03 0501 	and.w	r5, r3, r1
 8001408:	ea04 0602 	and.w	r6, r4, r2
 800140c:	4a7f      	ldr	r2, [pc, #508]	; (800160c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800140e:	fb02 f106 	mul.w	r1, r2, r6
 8001412:	2200      	movs	r2, #0
 8001414:	fb02 f205 	mul.w	r2, r2, r5
 8001418:	440a      	add	r2, r1
 800141a:	497c      	ldr	r1, [pc, #496]	; (800160c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800141c:	fba5 0101 	umull	r0, r1, r5, r1
 8001420:	1853      	adds	r3, r2, r1
 8001422:	4619      	mov	r1, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f04f 0400 	mov.w	r4, #0
 800142a:	461a      	mov	r2, r3
 800142c:	4623      	mov	r3, r4
 800142e:	f7fe feef 	bl	8000210 <__aeabi_uldivmod>
 8001432:	4603      	mov	r3, r0
 8001434:	460c      	mov	r4, r1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e049      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800143a:	4b72      	ldr	r3, [pc, #456]	; (8001604 <HAL_RCC_GetSysClockFreq+0x298>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	099b      	lsrs	r3, r3, #6
 8001440:	f04f 0400 	mov.w	r4, #0
 8001444:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	ea03 0501 	and.w	r5, r3, r1
 8001450:	ea04 0602 	and.w	r6, r4, r2
 8001454:	4629      	mov	r1, r5
 8001456:	4632      	mov	r2, r6
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	f04f 0400 	mov.w	r4, #0
 8001460:	0154      	lsls	r4, r2, #5
 8001462:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001466:	014b      	lsls	r3, r1, #5
 8001468:	4619      	mov	r1, r3
 800146a:	4622      	mov	r2, r4
 800146c:	1b49      	subs	r1, r1, r5
 800146e:	eb62 0206 	sbc.w	r2, r2, r6
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	f04f 0400 	mov.w	r4, #0
 800147a:	0194      	lsls	r4, r2, #6
 800147c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001480:	018b      	lsls	r3, r1, #6
 8001482:	1a5b      	subs	r3, r3, r1
 8001484:	eb64 0402 	sbc.w	r4, r4, r2
 8001488:	f04f 0100 	mov.w	r1, #0
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	00e2      	lsls	r2, r4, #3
 8001492:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001496:	00d9      	lsls	r1, r3, #3
 8001498:	460b      	mov	r3, r1
 800149a:	4614      	mov	r4, r2
 800149c:	195b      	adds	r3, r3, r5
 800149e:	eb44 0406 	adc.w	r4, r4, r6
 80014a2:	f04f 0100 	mov.w	r1, #0
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	02a2      	lsls	r2, r4, #10
 80014ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80014b0:	0299      	lsls	r1, r3, #10
 80014b2:	460b      	mov	r3, r1
 80014b4:	4614      	mov	r4, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	4621      	mov	r1, r4
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f04f 0400 	mov.w	r4, #0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4623      	mov	r3, r4
 80014c4:	f7fe fea4 	bl	8000210 <__aeabi_uldivmod>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014ce:	4b4d      	ldr	r3, [pc, #308]	; (8001604 <HAL_RCC_GetSysClockFreq+0x298>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	3301      	adds	r3, #1
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	613b      	str	r3, [r7, #16]
      break;
 80014e8:	e087      	b.n	80015fa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ea:	4b46      	ldr	r3, [pc, #280]	; (8001604 <HAL_RCC_GetSysClockFreq+0x298>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014f2:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014f4:	4b43      	ldr	r3, [pc, #268]	; (8001604 <HAL_RCC_GetSysClockFreq+0x298>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d023      	beq.n	8001548 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <HAL_RCC_GetSysClockFreq+0x298>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	099b      	lsrs	r3, r3, #6
 8001506:	f04f 0400 	mov.w	r4, #0
 800150a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	ea03 0501 	and.w	r5, r3, r1
 8001516:	ea04 0602 	and.w	r6, r4, r2
 800151a:	4a3c      	ldr	r2, [pc, #240]	; (800160c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800151c:	fb02 f106 	mul.w	r1, r2, r6
 8001520:	2200      	movs	r2, #0
 8001522:	fb02 f205 	mul.w	r2, r2, r5
 8001526:	440a      	add	r2, r1
 8001528:	4938      	ldr	r1, [pc, #224]	; (800160c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800152a:	fba5 0101 	umull	r0, r1, r5, r1
 800152e:	1853      	adds	r3, r2, r1
 8001530:	4619      	mov	r1, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f04f 0400 	mov.w	r4, #0
 8001538:	461a      	mov	r2, r3
 800153a:	4623      	mov	r3, r4
 800153c:	f7fe fe68 	bl	8000210 <__aeabi_uldivmod>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e049      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001548:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <HAL_RCC_GetSysClockFreq+0x298>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	f04f 0400 	mov.w	r4, #0
 8001552:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	ea03 0501 	and.w	r5, r3, r1
 800155e:	ea04 0602 	and.w	r6, r4, r2
 8001562:	4629      	mov	r1, r5
 8001564:	4632      	mov	r2, r6
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	f04f 0400 	mov.w	r4, #0
 800156e:	0154      	lsls	r4, r2, #5
 8001570:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001574:	014b      	lsls	r3, r1, #5
 8001576:	4619      	mov	r1, r3
 8001578:	4622      	mov	r2, r4
 800157a:	1b49      	subs	r1, r1, r5
 800157c:	eb62 0206 	sbc.w	r2, r2, r6
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	f04f 0400 	mov.w	r4, #0
 8001588:	0194      	lsls	r4, r2, #6
 800158a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800158e:	018b      	lsls	r3, r1, #6
 8001590:	1a5b      	subs	r3, r3, r1
 8001592:	eb64 0402 	sbc.w	r4, r4, r2
 8001596:	f04f 0100 	mov.w	r1, #0
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	00e2      	lsls	r2, r4, #3
 80015a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015a4:	00d9      	lsls	r1, r3, #3
 80015a6:	460b      	mov	r3, r1
 80015a8:	4614      	mov	r4, r2
 80015aa:	195b      	adds	r3, r3, r5
 80015ac:	eb44 0406 	adc.w	r4, r4, r6
 80015b0:	f04f 0100 	mov.w	r1, #0
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	02a2      	lsls	r2, r4, #10
 80015ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015be:	0299      	lsls	r1, r3, #10
 80015c0:	460b      	mov	r3, r1
 80015c2:	4614      	mov	r4, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	4621      	mov	r1, r4
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f04f 0400 	mov.w	r4, #0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4623      	mov	r3, r4
 80015d2:	f7fe fe1d 	bl	8000210 <__aeabi_uldivmod>
 80015d6:	4603      	mov	r3, r0
 80015d8:	460c      	mov	r4, r1
 80015da:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_RCC_GetSysClockFreq+0x298>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	0f1b      	lsrs	r3, r3, #28
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f0:	613b      	str	r3, [r7, #16]
      break;
 80015f2:	e002      	b.n	80015fa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <HAL_RCC_GetSysClockFreq+0x29c>)
 80015f6:	613b      	str	r3, [r7, #16]
      break;
 80015f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015fa:	693b      	ldr	r3, [r7, #16]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	00f42400 	.word	0x00f42400
 800160c:	017d7840 	.word	0x017d7840

08001610 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 8083 	beq.w	8001730 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800162a:	4b95      	ldr	r3, [pc, #596]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b04      	cmp	r3, #4
 8001634:	d019      	beq.n	800166a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001636:	4b92      	ldr	r3, [pc, #584]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800163e:	2b08      	cmp	r3, #8
 8001640:	d106      	bne.n	8001650 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001642:	4b8f      	ldr	r3, [pc, #572]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800164e:	d00c      	beq.n	800166a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001650:	4b8b      	ldr	r3, [pc, #556]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001658:	2b0c      	cmp	r3, #12
 800165a:	d112      	bne.n	8001682 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165c:	4b88      	ldr	r3, [pc, #544]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001668:	d10b      	bne.n	8001682 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166a:	4b85      	ldr	r3, [pc, #532]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d05b      	beq.n	800172e <HAL_RCC_OscConfig+0x11e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d157      	bne.n	800172e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e216      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x8a>
 800168c:	4b7c      	ldr	r3, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a7b      	ldr	r2, [pc, #492]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 8001692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e01d      	b.n	80016d6 <HAL_RCC_OscConfig+0xc6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a2:	d10c      	bne.n	80016be <HAL_RCC_OscConfig+0xae>
 80016a4:	4b76      	ldr	r3, [pc, #472]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a75      	ldr	r2, [pc, #468]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80016aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b73      	ldr	r3, [pc, #460]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a72      	ldr	r2, [pc, #456]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80016b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	e00b      	b.n	80016d6 <HAL_RCC_OscConfig+0xc6>
 80016be:	4b70      	ldr	r3, [pc, #448]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a6f      	ldr	r2, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80016c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b6d      	ldr	r3, [pc, #436]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6c      	ldr	r2, [pc, #432]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80016d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d013      	beq.n	8001706 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7fe ff4d 	bl	800057c <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e6:	f7fe ff49 	bl	800057c <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b64      	cmp	r3, #100	; 0x64
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e1db      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f8:	4b61      	ldr	r3, [pc, #388]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0xd6>
 8001704:	e014      	b.n	8001730 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7fe ff39 	bl	800057c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170e:	f7fe ff35 	bl	800057c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b64      	cmp	r3, #100	; 0x64
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1c7      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001720:	4b57      	ldr	r3, [pc, #348]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f0      	bne.n	800170e <HAL_RCC_OscConfig+0xfe>
 800172c:	e000      	b.n	8001730 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d06f      	beq.n	800181c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b00      	cmp	r3, #0
 8001746:	d017      	beq.n	8001778 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001748:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001750:	2b08      	cmp	r3, #8
 8001752:	d105      	bne.n	8001760 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001754:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00b      	beq.n	8001778 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001760:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001768:	2b0c      	cmp	r3, #12
 800176a:	d11c      	bne.n	80017a6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176c:	4b44      	ldr	r3, [pc, #272]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d116      	bne.n	80017a6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001778:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_OscConfig+0x180>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d001      	beq.n	8001790 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e18f      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4938      	ldr	r1, [pc, #224]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a4:	e03a      	b.n	800181c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d020      	beq.n	80017f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ae:	4b35      	ldr	r3, [pc, #212]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7fe fee2 	bl	800057c <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017bc:	f7fe fede 	bl	800057c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e170      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017da:	4b29      	ldr	r3, [pc, #164]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4925      	ldr	r1, [pc, #148]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
 80017ee:	e015      	b.n	800181c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7fe fec1 	bl	800057c <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fe:	f7fe febd 	bl	800057c <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e14f      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d037      	beq.n	8001898 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d016      	beq.n	800185e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_RCC_OscConfig+0x278>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7fe fea1 	bl	800057c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183e:	f7fe fe9d 	bl	800057c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e12f      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_OscConfig+0x270>)
 8001852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x22e>
 800185c:	e01c      	b.n	8001898 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_RCC_OscConfig+0x278>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7fe fe8a 	bl	800057c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186a:	e00f      	b.n	800188c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186c:	f7fe fe86 	bl	800057c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d908      	bls.n	800188c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e118      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	42470000 	.word	0x42470000
 8001888:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	4b8a      	ldr	r3, [pc, #552]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 800188e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e9      	bne.n	800186c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 8097 	beq.w	80019d4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018aa:	4b83      	ldr	r3, [pc, #524]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10f      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b7f      	ldr	r3, [pc, #508]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a7e      	ldr	r2, [pc, #504]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b7c      	ldr	r3, [pc, #496]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	4b79      	ldr	r3, [pc, #484]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d118      	bne.n	8001914 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e2:	4b76      	ldr	r3, [pc, #472]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a75      	ldr	r2, [pc, #468]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ee:	f7fe fe45 	bl	800057c <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f6:	f7fe fe41 	bl	800057c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e0d3      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	4b6c      	ldr	r3, [pc, #432]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x31a>
 800191c:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001920:	4a65      	ldr	r2, [pc, #404]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6713      	str	r3, [r2, #112]	; 0x70
 8001928:	e01c      	b.n	8001964 <HAL_RCC_OscConfig+0x354>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b05      	cmp	r3, #5
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x33c>
 8001932:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	4a60      	ldr	r2, [pc, #384]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	6713      	str	r3, [r2, #112]	; 0x70
 800193e:	4b5e      	ldr	r3, [pc, #376]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	4a5d      	ldr	r2, [pc, #372]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6713      	str	r3, [r2, #112]	; 0x70
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0x354>
 800194c:	4b5a      	ldr	r3, [pc, #360]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	4a59      	ldr	r2, [pc, #356]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	6713      	str	r3, [r2, #112]	; 0x70
 8001958:	4b57      	ldr	r3, [pc, #348]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4a56      	ldr	r2, [pc, #344]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 800195e:	f023 0304 	bic.w	r3, r3, #4
 8001962:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d015      	beq.n	8001998 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7fe fe06 	bl	800057c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7fe fe02 	bl	800057c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e092      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198a:	4b4b      	ldr	r3, [pc, #300]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0ee      	beq.n	8001974 <HAL_RCC_OscConfig+0x364>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7fe fdf0 	bl	800057c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7fe fdec 	bl	800057c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e07c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b6:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ee      	bne.n	80019a0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c2:	7dfb      	ldrb	r3, [r7, #23]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a3a      	ldr	r2, [pc, #232]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 80019ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d068      	beq.n	8001aae <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d060      	beq.n	8001aaa <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d145      	bne.n	8001a7c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f0:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <HAL_RCC_OscConfig+0x4b0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7fe fdc1 	bl	800057c <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fe:	f7fe fdbd 	bl	800057c <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e04f      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a10:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69da      	ldr	r2, [r3, #28]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	019b      	lsls	r3, r3, #6
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	3b01      	subs	r3, #1
 8001a36:	041b      	lsls	r3, r3, #16
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	061b      	lsls	r3, r3, #24
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	071b      	lsls	r3, r3, #28
 8001a48:	491b      	ldr	r1, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_RCC_OscConfig+0x4b0>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7fe fd92 	bl	800057c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7fe fd8e 	bl	800057c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e020      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x44c>
 8001a7a:	e018      	b.n	8001aae <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_RCC_OscConfig+0x4b0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7fe fd7b 	bl	800057c <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7fe fd77 	bl	800057c <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e009      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_RCC_OscConfig+0x4a8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x47a>
 8001aa8:	e001      	b.n	8001aae <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000
 8001ac0:	42470060 	.word	0x42470060

08001ac4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e083      	b.n	8001bde <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7f5b      	ldrb	r3, [r3, #29]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f002 f948 	bl	8003d7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	22ca      	movs	r2, #202	; 0xca
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2253      	movs	r2, #83	; 0x53
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f9fb 	bl	8001efe <RTC_EnterInitMode>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	22ff      	movs	r2, #255	; 0xff
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e05e      	b.n	8001bde <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b32:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68d2      	ldr	r2, [r2, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6919      	ldr	r1, [r3, #16]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	041a      	lsls	r2, r3, #16
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b7e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10e      	bne.n	8001bac <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f98d 	bl	8001eae <HAL_RTC_WaitForSynchro>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e018      	b.n	8001bde <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	22ff      	movs	r2, #255	; 0xff
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
  }
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001be6:	b590      	push	{r4, r7, lr}
 8001be8:	b087      	sub	sp, #28
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	7f1b      	ldrb	r3, [r3, #28]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_RTC_SetTime+0x1c>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0aa      	b.n	8001d58 <HAL_RTC_SetTime+0x172>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d126      	bne.n	8001c62 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2200      	movs	r2, #0
 8001c26:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f992 	bl	8001f56 <RTC_ByteToBcd2>
 8001c32:	4603      	mov	r3, r0
 8001c34:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f98b 	bl	8001f56 <RTC_ByteToBcd2>
 8001c40:	4603      	mov	r3, r0
 8001c42:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001c44:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	789b      	ldrb	r3, [r3, #2]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f983 	bl	8001f56 <RTC_ByteToBcd2>
 8001c50:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001c52:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	78db      	ldrb	r3, [r3, #3]
 8001c5a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e018      	b.n	8001c94 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2200      	movs	r2, #0
 8001c74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001c82:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001c88:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	78db      	ldrb	r3, [r3, #3]
 8001c8e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	22ca      	movs	r2, #202	; 0xca
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2253      	movs	r2, #83	; 0x53
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f92a 	bl	8001efe <RTC_EnterInitMode>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00b      	beq.n	8001cc8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	22ff      	movs	r2, #255	; 0xff
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2204      	movs	r2, #4
 8001cbc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e047      	b.n	8001d58 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001cd2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001cd6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ce6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6899      	ldr	r1, [r3, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d0e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d111      	bne.n	8001d42 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f8c5 	bl	8001eae <HAL_RTC_WaitForSynchro>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	22ff      	movs	r2, #255	; 0xff
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2204      	movs	r2, #4
 8001d36:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00a      	b.n	8001d58 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	22ff      	movs	r2, #255	; 0xff
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8001d56:	2300      	movs	r3, #0
  }
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd90      	pop	{r4, r7, pc}

08001d60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	7f1b      	ldrb	r3, [r3, #28]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_RTC_SetDate+0x1c>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e094      	b.n	8001ea6 <HAL_RTC_SetDate+0x146>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2202      	movs	r2, #2
 8001d86:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10e      	bne.n	8001dac <HAL_RTC_SetDate+0x4c>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	785b      	ldrb	r3, [r3, #1]
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	f023 0310 	bic.w	r3, r3, #16
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	330a      	adds	r3, #10
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11c      	bne.n	8001dec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	78db      	ldrb	r3, [r3, #3]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f8cd 	bl	8001f56 <RTC_ByteToBcd2>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	785b      	ldrb	r3, [r3, #1]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f8c6 	bl	8001f56 <RTC_ByteToBcd2>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001dce:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	789b      	ldrb	r3, [r3, #2]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 f8be 	bl	8001f56 <RTC_ByteToBcd2>
 8001dda:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001ddc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e00e      	b.n	8001e0a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	78db      	ldrb	r3, [r3, #3]
 8001df0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	785b      	ldrb	r3, [r3, #1]
 8001df6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001df8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8001dfe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001e06:	4313      	orrs	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	22ca      	movs	r2, #202	; 0xca
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2253      	movs	r2, #83	; 0x53
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f86f 	bl	8001efe <RTC_EnterInitMode>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	22ff      	movs	r2, #255	; 0xff
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2204      	movs	r2, #4
 8001e32:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e033      	b.n	8001ea6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e5c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f81e 	bl	8001eae <HAL_RTC_WaitForSynchro>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00b      	beq.n	8001e90 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	22ff      	movs	r2, #255	; 0xff
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2204      	movs	r2, #4
 8001e84:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	22ff      	movs	r2, #255	; 0xff
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
  }
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}

08001eae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ec8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001eca:	f7fe fb57 	bl	800057c <HAL_GetTick>
 8001ece:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001ed0:	e009      	b.n	8001ee6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001ed2:	f7fe fb53 	bl	800057c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e007      	b.n	8001ef6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ee      	beq.n	8001ed2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d119      	bne.n	8001f4c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f22:	f7fe fb2b 	bl	800057c <HAL_GetTick>
 8001f26:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001f28:	e009      	b.n	8001f3e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001f2a:	f7fe fb27 	bl	800057c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f38:	d901      	bls.n	8001f3e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e007      	b.n	8001f4e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ee      	beq.n	8001f2a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8001f64:	e005      	b.n	8001f72 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	3b0a      	subs	r3, #10
 8001f70:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	2b09      	cmp	r3, #9
 8001f76:	d8f6      	bhi.n	8001f66 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	b2db      	uxtb	r3, r3
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e01d      	b.n	8001fe0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f815 	bl	8001fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	f000 f967 	bl	80022a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b06      	cmp	r3, #6
 8002024:	d007      	beq.n	8002036 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b02      	cmp	r3, #2
 8002058:	d122      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b02      	cmp	r3, #2
 8002066:	d11b      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0202 	mvn.w	r2, #2
 8002070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8ee 	bl	8002268 <HAL_TIM_IC_CaptureCallback>
 800208c:	e005      	b.n	800209a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8e0 	bl	8002254 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f8f1 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d122      	bne.n	80020f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d11b      	bne.n	80020f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0204 	mvn.w	r2, #4
 80020c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f8c4 	bl	8002268 <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f8b6 	bl	8002254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f8c7 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d122      	bne.n	8002148 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b08      	cmp	r3, #8
 800210e:	d11b      	bne.n	8002148 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0208 	mvn.w	r2, #8
 8002118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2204      	movs	r2, #4
 800211e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f89a 	bl	8002268 <HAL_TIM_IC_CaptureCallback>
 8002134:	e005      	b.n	8002142 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f88c 	bl	8002254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f89d 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b10      	cmp	r3, #16
 8002154:	d122      	bne.n	800219c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b10      	cmp	r3, #16
 8002162:	d11b      	bne.n	800219c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0210 	mvn.w	r2, #16
 800216c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2208      	movs	r2, #8
 8002172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f870 	bl	8002268 <HAL_TIM_IC_CaptureCallback>
 8002188:	e005      	b.n	8002196 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f862 	bl	8002254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f873 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d10e      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0201 	mvn.w	r2, #1
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f001 fd94 	bl	8003cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d2:	2b80      	cmp	r3, #128	; 0x80
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d107      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f902 	bl	80023f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fe:	2b40      	cmp	r3, #64	; 0x40
 8002200:	d10e      	bne.n	8002220 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d107      	bne.n	8002220 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f838 	bl	8002290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b20      	cmp	r3, #32
 800222c:	d10e      	bne.n	800224c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	2b20      	cmp	r3, #32
 800223a:	d107      	bne.n	800224c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0220 	mvn.w	r2, #32
 8002244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f8cc 	bl	80023e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a40      	ldr	r2, [pc, #256]	; (80023b8 <TIM_Base_SetConfig+0x114>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c2:	d00f      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a3d      	ldr	r2, [pc, #244]	; (80023bc <TIM_Base_SetConfig+0x118>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d00b      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a3c      	ldr	r2, [pc, #240]	; (80023c0 <TIM_Base_SetConfig+0x11c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d007      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3b      	ldr	r2, [pc, #236]	; (80023c4 <TIM_Base_SetConfig+0x120>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d003      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3a      	ldr	r2, [pc, #232]	; (80023c8 <TIM_Base_SetConfig+0x124>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d108      	bne.n	80022f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2f      	ldr	r2, [pc, #188]	; (80023b8 <TIM_Base_SetConfig+0x114>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02b      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002304:	d027      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a2c      	ldr	r2, [pc, #176]	; (80023bc <TIM_Base_SetConfig+0x118>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d023      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a2b      	ldr	r2, [pc, #172]	; (80023c0 <TIM_Base_SetConfig+0x11c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01f      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <TIM_Base_SetConfig+0x120>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01b      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a29      	ldr	r2, [pc, #164]	; (80023c8 <TIM_Base_SetConfig+0x124>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d017      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a28      	ldr	r2, [pc, #160]	; (80023cc <TIM_Base_SetConfig+0x128>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a27      	ldr	r2, [pc, #156]	; (80023d0 <TIM_Base_SetConfig+0x12c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00f      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <TIM_Base_SetConfig+0x130>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00b      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a25      	ldr	r2, [pc, #148]	; (80023d8 <TIM_Base_SetConfig+0x134>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a24      	ldr	r2, [pc, #144]	; (80023dc <TIM_Base_SetConfig+0x138>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d003      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a23      	ldr	r2, [pc, #140]	; (80023e0 <TIM_Base_SetConfig+0x13c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d108      	bne.n	8002368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <TIM_Base_SetConfig+0x114>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d003      	beq.n	800239c <TIM_Base_SetConfig+0xf8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <TIM_Base_SetConfig+0x124>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d103      	bne.n	80023a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	615a      	str	r2, [r3, #20]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40000800 	.word	0x40000800
 80023c4:	40000c00 	.word	0x40000c00
 80023c8:	40010400 	.word	0x40010400
 80023cc:	40014000 	.word	0x40014000
 80023d0:	40014400 	.word	0x40014400
 80023d4:	40014800 	.word	0x40014800
 80023d8:	40001800 	.word	0x40001800
 80023dc:	40001c00 	.word	0x40001c00
 80023e0:	40002000 	.word	0x40002000

080023e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800241a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800241e:	2b84      	cmp	r3, #132	; 0x84
 8002420:	d005      	beq.n	800242e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002422:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4413      	add	r3, r2
 800242a:	3303      	adds	r3, #3
 800242c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002440:	f000 fad2 	bl	80029e8 <vTaskStartScheduler>
  
  return osOK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	bd80      	pop	{r7, pc}

0800244a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	b089      	sub	sp, #36	; 0x24
 800244e:	af04      	add	r7, sp, #16
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <osThreadCreate+0x54>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01c      	beq.n	800249e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685c      	ldr	r4, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681d      	ldr	r5, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691e      	ldr	r6, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ffc8 	bl	800240c <makeFreeRtosPriority>
 800247c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002486:	9202      	str	r2, [sp, #8]
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	9100      	str	r1, [sp, #0]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	4632      	mov	r2, r6
 8002490:	4629      	mov	r1, r5
 8002492:	4620      	mov	r0, r4
 8002494:	f000 f8ed 	bl	8002672 <xTaskCreateStatic>
 8002498:	4603      	mov	r3, r0
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e01c      	b.n	80024d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685c      	ldr	r4, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024aa:	b29e      	uxth	r6, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ffaa 	bl	800240c <makeFreeRtosPriority>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	9200      	str	r2, [sp, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	4632      	mov	r2, r6
 80024c6:	4629      	mov	r1, r5
 80024c8:	4620      	mov	r0, r4
 80024ca:	f000 f92b 	bl	8002724 <xTaskCreate>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d001      	beq.n	80024d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e000      	b.n	80024da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80024d8:	68fb      	ldr	r3, [r7, #12]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <osDelay+0x16>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	e000      	b.n	80024fa <osDelay+0x18>
 80024f8:	2301      	movs	r3, #1
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fa40 	bl	8002980 <vTaskDelay>
  
  return osOK;
 8002500:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f103 0208 	add.w	r2, r3, #8
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002522:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f103 0208 	add.w	r2, r3, #8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f103 0208 	add.w	r2, r3, #8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	601a      	str	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c2:	d103      	bne.n	80025cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	e00c      	b.n	80025e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3308      	adds	r3, #8
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	e002      	b.n	80025da <vListInsert+0x2e>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d2f6      	bcs.n	80025d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	601a      	str	r2, [r3, #0]
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6892      	ldr	r2, [r2, #8]
 8002634:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6852      	ldr	r2, [r2, #4]
 800263e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d103      	bne.n	8002652 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002672:	b580      	push	{r7, lr}
 8002674:	b08e      	sub	sp, #56	; 0x38
 8002676:	af04      	add	r7, sp, #16
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	623b      	str	r3, [r7, #32]
 8002698:	e7fe      	b.n	8002698 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	2b00      	cmp	r3, #0
 800269e:	d109      	bne.n	80026b4 <xTaskCreateStatic+0x42>
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	e7fe      	b.n	80026b2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80026b4:	2354      	movs	r3, #84	; 0x54
 80026b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b54      	cmp	r3, #84	; 0x54
 80026bc:	d009      	beq.n	80026d2 <xTaskCreateStatic+0x60>
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	e7fe      	b.n	80026d0 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01e      	beq.n	8002716 <xTaskCreateStatic+0xa4>
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01b      	beq.n	8002716 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80026f0:	2300      	movs	r3, #0
 80026f2:	9303      	str	r3, [sp, #12]
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	9302      	str	r3, [sp, #8]
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f850 	bl	80027ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800270e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002710:	f000 f8cc 	bl	80028ac <prvAddNewTaskToReadyList>
 8002714:	e001      	b.n	800271a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800271a:	697b      	ldr	r3, [r7, #20]
	}
 800271c:	4618      	mov	r0, r3
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	; 0x30
 8002728:	af04      	add	r7, sp, #16
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f000 feb3 	bl	80034a4 <pvPortMalloc>
 800273e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00e      	beq.n	8002764 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002746:	2054      	movs	r0, #84	; 0x54
 8002748:	f000 feac 	bl	80034a4 <pvPortMalloc>
 800274c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
 800275a:	e005      	b.n	8002768 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800275c:	6978      	ldr	r0, [r7, #20]
 800275e:	f000 ff63 	bl	8003628 <vPortFree>
 8002762:	e001      	b.n	8002768 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d017      	beq.n	800279e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002776:	88fa      	ldrh	r2, [r7, #6]
 8002778:	2300      	movs	r3, #0
 800277a:	9303      	str	r3, [sp, #12]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	9302      	str	r3, [sp, #8]
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f80e 	bl	80027ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002792:	69f8      	ldr	r0, [r7, #28]
 8002794:	f000 f88a 	bl	80028ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002798:	2301      	movs	r3, #1
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	e002      	b.n	80027a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80027a4:	69bb      	ldr	r3, [r7, #24]
	}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3720      	adds	r7, #32
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b088      	sub	sp, #32
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027c6:	3b01      	subs	r3, #1
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f023 0307 	bic.w	r3, r3, #7
 80027d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <prvInitialiseNewTask+0x46>
 80027e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e4:	f383 8811 	msr	BASEPRI, r3
 80027e8:	f3bf 8f6f 	isb	sy
 80027ec:	f3bf 8f4f 	dsb	sy
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e7fe      	b.n	80027f2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	e012      	b.n	8002820 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	7819      	ldrb	r1, [r3, #0]
 8002802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4413      	add	r3, r2
 8002808:	3334      	adds	r3, #52	; 0x34
 800280a:	460a      	mov	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d006      	beq.n	8002828 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3301      	adds	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b0f      	cmp	r3, #15
 8002824:	d9e9      	bls.n	80027fa <prvInitialiseNewTask+0x4c>
 8002826:	e000      	b.n	800282a <prvInitialiseNewTask+0x7c>
		{
			break;
 8002828:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	2b06      	cmp	r3, #6
 8002836:	d901      	bls.n	800283c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002838:	2306      	movs	r3, #6
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	2200      	movs	r2, #0
 800284c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	3304      	adds	r3, #4
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fe79 	bl	800254a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	3318      	adds	r3, #24
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fe74 	bl	800254a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	f1c3 0207 	rsb	r2, r3, #7
 800286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287a:	2200      	movs	r2, #0
 800287c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	68f9      	ldr	r1, [r7, #12]
 800288a:	69b8      	ldr	r0, [r7, #24]
 800288c:	f000 fc08 	bl	80030a0 <pxPortInitialiseStack>
 8002890:	4602      	mov	r2, r0
 8002892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002894:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028a2:	bf00      	nop
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80028b4:	f000 fd1a 	bl	80032ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028b8:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <prvAddNewTaskToReadyList+0xb8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3301      	adds	r3, #1
 80028be:	4a29      	ldr	r2, [pc, #164]	; (8002964 <prvAddNewTaskToReadyList+0xb8>)
 80028c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80028c2:	4b29      	ldr	r3, [pc, #164]	; (8002968 <prvAddNewTaskToReadyList+0xbc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80028ca:	4a27      	ldr	r2, [pc, #156]	; (8002968 <prvAddNewTaskToReadyList+0xbc>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <prvAddNewTaskToReadyList+0xb8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d110      	bne.n	80028fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80028d8:	f000 fabc 	bl	8002e54 <prvInitialiseTaskLists>
 80028dc:	e00d      	b.n	80028fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80028de:	4b23      	ldr	r3, [pc, #140]	; (800296c <prvAddNewTaskToReadyList+0xc0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <prvAddNewTaskToReadyList+0xbc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d802      	bhi.n	80028fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028f4:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <prvAddNewTaskToReadyList+0xbc>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <prvAddNewTaskToReadyList+0xc4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <prvAddNewTaskToReadyList+0xc4>)
 8002902:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	2201      	movs	r2, #1
 800290a:	409a      	lsls	r2, r3
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <prvAddNewTaskToReadyList+0xc8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4313      	orrs	r3, r2
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <prvAddNewTaskToReadyList+0xc8>)
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4a15      	ldr	r2, [pc, #84]	; (8002978 <prvAddNewTaskToReadyList+0xcc>)
 8002924:	441a      	add	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3304      	adds	r3, #4
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f7ff fe19 	bl	8002564 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002932:	f000 fd09 	bl	8003348 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <prvAddNewTaskToReadyList+0xc0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00e      	beq.n	800295c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <prvAddNewTaskToReadyList+0xbc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	429a      	cmp	r2, r3
 800294a:	d207      	bcs.n	800295c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <prvAddNewTaskToReadyList+0xd0>)
 800294e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000128 	.word	0x20000128
 8002968:	20000028 	.word	0x20000028
 800296c:	20000134 	.word	0x20000134
 8002970:	20000144 	.word	0x20000144
 8002974:	20000130 	.word	0x20000130
 8002978:	2000002c 	.word	0x2000002c
 800297c:	e000ed04 	.word	0xe000ed04

08002980 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d016      	beq.n	80029c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <vTaskDelay+0x60>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <vTaskDelay+0x2e>
 800299a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	e7fe      	b.n	80029ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80029ae:	f000 f879 	bl	8002aa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029b2:	2100      	movs	r1, #0
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fb0d 	bl	8002fd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80029ba:	f000 f881 	bl	8002ac0 <xTaskResumeAll>
 80029be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d107      	bne.n	80029d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <vTaskDelay+0x64>)
 80029c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000150 	.word	0x20000150
 80029e4:	e000ed04 	.word	0xe000ed04

080029e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80029f6:	463a      	mov	r2, r7
 80029f8:	1d39      	adds	r1, r7, #4
 80029fa:	f107 0308 	add.w	r3, r7, #8
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 ff26 	bl	8003850 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002a04:	6839      	ldr	r1, [r7, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	9202      	str	r2, [sp, #8]
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	2300      	movs	r3, #0
 8002a14:	460a      	mov	r2, r1
 8002a16:	491d      	ldr	r1, [pc, #116]	; (8002a8c <vTaskStartScheduler+0xa4>)
 8002a18:	481d      	ldr	r0, [pc, #116]	; (8002a90 <vTaskStartScheduler+0xa8>)
 8002a1a:	f7ff fe2a 	bl	8002672 <xTaskCreateStatic>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <vTaskStartScheduler+0xac>)
 8002a22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <vTaskStartScheduler+0xac>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e001      	b.n	8002a36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d115      	bne.n	8002a68 <vTaskStartScheduler+0x80>
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <vTaskStartScheduler+0xb0>)
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <vTaskStartScheduler+0xb4>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <vTaskStartScheduler+0xb8>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a62:	f000 fba5 	bl	80031b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a66:	e00d      	b.n	8002a84 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a6e:	d109      	bne.n	8002a84 <vTaskStartScheduler+0x9c>
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	e7fe      	b.n	8002a82 <vTaskStartScheduler+0x9a>
}
 8002a84:	bf00      	nop
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	08003fd0 	.word	0x08003fd0
 8002a90:	08002e25 	.word	0x08002e25
 8002a94:	2000014c 	.word	0x2000014c
 8002a98:	20000148 	.word	0x20000148
 8002a9c:	20000134 	.word	0x20000134
 8002aa0:	2000012c 	.word	0x2000012c

08002aa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <vTaskSuspendAll+0x18>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	4a03      	ldr	r2, [pc, #12]	; (8002abc <vTaskSuspendAll+0x18>)
 8002ab0:	6013      	str	r3, [r2, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	20000150 	.word	0x20000150

08002ac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ace:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <xTaskResumeAll+0x114>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <xTaskResumeAll+0x2a>
 8002ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	e7fe      	b.n	8002ae8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002aea:	f000 fbff 	bl	80032ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002aee:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <xTaskResumeAll+0x114>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	4a37      	ldr	r2, [pc, #220]	; (8002bd4 <xTaskResumeAll+0x114>)
 8002af6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002af8:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <xTaskResumeAll+0x114>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d161      	bne.n	8002bc4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b00:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <xTaskResumeAll+0x118>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d05d      	beq.n	8002bc4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b08:	e02e      	b.n	8002b68 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b0a:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <xTaskResumeAll+0x11c>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3318      	adds	r3, #24
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fd81 	bl	800261e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fd7c 	bl	800261e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <xTaskResumeAll+0x120>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	4a2a      	ldr	r2, [pc, #168]	; (8002be0 <xTaskResumeAll+0x120>)
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <xTaskResumeAll+0x124>)
 8002b46:	441a      	add	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f7ff fd08 	bl	8002564 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <xTaskResumeAll+0x128>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002b62:	4b22      	ldr	r3, [pc, #136]	; (8002bec <xTaskResumeAll+0x12c>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <xTaskResumeAll+0x11c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1cc      	bne.n	8002b0a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b76:	f000 fa07 	bl	8002f88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <xTaskResumeAll+0x130>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b86:	f000 f837 	bl	8002bf8 <xTaskIncrementTick>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <xTaskResumeAll+0x12c>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f1      	bne.n	8002b86 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002ba2:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <xTaskResumeAll+0x130>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <xTaskResumeAll+0x12c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d009      	beq.n	8002bc4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <xTaskResumeAll+0x134>)
 8002bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002bc4:	f000 fbc0 	bl	8003348 <vPortExitCritical>

	return xAlreadyYielded;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000150 	.word	0x20000150
 8002bd8:	20000128 	.word	0x20000128
 8002bdc:	200000e8 	.word	0x200000e8
 8002be0:	20000130 	.word	0x20000130
 8002be4:	2000002c 	.word	0x2000002c
 8002be8:	20000028 	.word	0x20000028
 8002bec:	2000013c 	.word	0x2000013c
 8002bf0:	20000138 	.word	0x20000138
 8002bf4:	e000ed04 	.word	0xe000ed04

08002bf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c02:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <xTaskIncrementTick+0x14c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 808c 	bne.w	8002d24 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c0c:	4b4e      	ldr	r3, [pc, #312]	; (8002d48 <xTaskIncrementTick+0x150>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c14:	4a4c      	ldr	r2, [pc, #304]	; (8002d48 <xTaskIncrementTick+0x150>)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d11f      	bne.n	8002c60 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c20:	4b4a      	ldr	r3, [pc, #296]	; (8002d4c <xTaskIncrementTick+0x154>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <xTaskIncrementTick+0x46>
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	e7fe      	b.n	8002c3c <xTaskIncrementTick+0x44>
 8002c3e:	4b43      	ldr	r3, [pc, #268]	; (8002d4c <xTaskIncrementTick+0x154>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	4b42      	ldr	r3, [pc, #264]	; (8002d50 <xTaskIncrementTick+0x158>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a40      	ldr	r2, [pc, #256]	; (8002d4c <xTaskIncrementTick+0x154>)
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4a40      	ldr	r2, [pc, #256]	; (8002d50 <xTaskIncrementTick+0x158>)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b40      	ldr	r3, [pc, #256]	; (8002d54 <xTaskIncrementTick+0x15c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3301      	adds	r3, #1
 8002c58:	4a3e      	ldr	r2, [pc, #248]	; (8002d54 <xTaskIncrementTick+0x15c>)
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	f000 f994 	bl	8002f88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c60:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <xTaskIncrementTick+0x160>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d34d      	bcc.n	8002d06 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c6a:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <xTaskIncrementTick+0x154>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <xTaskIncrementTick+0x80>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <xTaskIncrementTick+0x82>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c7e:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <xTaskIncrementTick+0x160>)
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c84:	601a      	str	r2, [r3, #0]
					break;
 8002c86:	e03e      	b.n	8002d06 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c88:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <xTaskIncrementTick+0x154>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d203      	bcs.n	8002ca8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ca0:	4a2d      	ldr	r2, [pc, #180]	; (8002d58 <xTaskIncrementTick+0x160>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6013      	str	r3, [r2, #0]
						break;
 8002ca6:	e02e      	b.n	8002d06 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	3304      	adds	r3, #4
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fcb6 	bl	800261e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d004      	beq.n	8002cc4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3318      	adds	r3, #24
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fcad 	bl	800261e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	2201      	movs	r2, #1
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <xTaskIncrementTick+0x164>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <xTaskIncrementTick+0x164>)
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4a1f      	ldr	r2, [pc, #124]	; (8002d60 <xTaskIncrementTick+0x168>)
 8002ce4:	441a      	add	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f7ff fc39 	bl	8002564 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <xTaskIncrementTick+0x16c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3b4      	bcc.n	8002c6a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002d00:	2301      	movs	r3, #1
 8002d02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d04:	e7b1      	b.n	8002c6a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <xTaskIncrementTick+0x16c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	4914      	ldr	r1, [pc, #80]	; (8002d60 <xTaskIncrementTick+0x168>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d907      	bls.n	8002d2e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e004      	b.n	8002d2e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <xTaskIncrementTick+0x170>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	4a0f      	ldr	r2, [pc, #60]	; (8002d68 <xTaskIncrementTick+0x170>)
 8002d2c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <xTaskIncrementTick+0x174>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002d36:	2301      	movs	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002d3a:	697b      	ldr	r3, [r7, #20]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000150 	.word	0x20000150
 8002d48:	2000012c 	.word	0x2000012c
 8002d4c:	200000e0 	.word	0x200000e0
 8002d50:	200000e4 	.word	0x200000e4
 8002d54:	20000140 	.word	0x20000140
 8002d58:	20000148 	.word	0x20000148
 8002d5c:	20000130 	.word	0x20000130
 8002d60:	2000002c 	.word	0x2000002c
 8002d64:	20000028 	.word	0x20000028
 8002d68:	20000138 	.word	0x20000138
 8002d6c:	2000013c 	.word	0x2000013c

08002d70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d76:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <vTaskSwitchContext+0xa0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d7e:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <vTaskSwitchContext+0xa4>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d84:	e03e      	b.n	8002e04 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002d86:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <vTaskSwitchContext+0xa4>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002d8c:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <vTaskSwitchContext+0xa8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
 8002d9c:	f1c3 031f 	rsb	r3, r3, #31
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	491e      	ldr	r1, [pc, #120]	; (8002e1c <vTaskSwitchContext+0xac>)
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <vTaskSwitchContext+0x5a>
	__asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	e7fe      	b.n	8002dc8 <vTaskSwitchContext+0x58>
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4a11      	ldr	r2, [pc, #68]	; (8002e1c <vTaskSwitchContext+0xac>)
 8002dd6:	4413      	add	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	3308      	adds	r3, #8
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d104      	bne.n	8002dfa <vTaskSwitchContext+0x8a>
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <vTaskSwitchContext+0xb0>)
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	20000150 	.word	0x20000150
 8002e14:	2000013c 	.word	0x2000013c
 8002e18:	20000130 	.word	0x20000130
 8002e1c:	2000002c 	.word	0x2000002c
 8002e20:	20000028 	.word	0x20000028

08002e24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002e2c:	f000 f852 	bl	8002ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <prvIdleTask+0x28>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d9f9      	bls.n	8002e2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <prvIdleTask+0x2c>)
 8002e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002e48:	e7f0      	b.n	8002e2c <prvIdleTask+0x8>
 8002e4a:	bf00      	nop
 8002e4c:	2000002c 	.word	0x2000002c
 8002e50:	e000ed04 	.word	0xe000ed04

08002e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	e00c      	b.n	8002e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <prvInitialiseTaskLists+0x60>)
 8002e6c:	4413      	add	r3, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fb4b 	bl	800250a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3301      	adds	r3, #1
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b06      	cmp	r3, #6
 8002e7e:	d9ef      	bls.n	8002e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002e80:	480d      	ldr	r0, [pc, #52]	; (8002eb8 <prvInitialiseTaskLists+0x64>)
 8002e82:	f7ff fb42 	bl	800250a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002e86:	480d      	ldr	r0, [pc, #52]	; (8002ebc <prvInitialiseTaskLists+0x68>)
 8002e88:	f7ff fb3f 	bl	800250a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002e8c:	480c      	ldr	r0, [pc, #48]	; (8002ec0 <prvInitialiseTaskLists+0x6c>)
 8002e8e:	f7ff fb3c 	bl	800250a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002e92:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <prvInitialiseTaskLists+0x70>)
 8002e94:	f7ff fb39 	bl	800250a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002e98:	480b      	ldr	r0, [pc, #44]	; (8002ec8 <prvInitialiseTaskLists+0x74>)
 8002e9a:	f7ff fb36 	bl	800250a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <prvInitialiseTaskLists+0x78>)
 8002ea0:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <prvInitialiseTaskLists+0x64>)
 8002ea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <prvInitialiseTaskLists+0x7c>)
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <prvInitialiseTaskLists+0x68>)
 8002ea8:	601a      	str	r2, [r3, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	2000002c 	.word	0x2000002c
 8002eb8:	200000b8 	.word	0x200000b8
 8002ebc:	200000cc 	.word	0x200000cc
 8002ec0:	200000e8 	.word	0x200000e8
 8002ec4:	200000fc 	.word	0x200000fc
 8002ec8:	20000114 	.word	0x20000114
 8002ecc:	200000e0 	.word	0x200000e0
 8002ed0:	200000e4 	.word	0x200000e4

08002ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002eda:	e019      	b.n	8002f10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002edc:	f000 fa06 	bl	80032ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <prvCheckTasksWaitingTermination+0x4c>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fb96 	bl	800261e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <prvCheckTasksWaitingTermination+0x50>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <prvCheckTasksWaitingTermination+0x50>)
 8002efa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <prvCheckTasksWaitingTermination+0x54>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <prvCheckTasksWaitingTermination+0x54>)
 8002f04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002f06:	f000 fa1f 	bl	8003348 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f80e 	bl	8002f2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <prvCheckTasksWaitingTermination+0x54>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e1      	bne.n	8002edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	200000fc 	.word	0x200000fc
 8002f24:	20000128 	.word	0x20000128
 8002f28:	20000110 	.word	0x20000110

08002f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fb70 	bl	8003628 <vPortFree>
				vPortFree( pxTCB );
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fb6d 	bl	8003628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002f4e:	e017      	b.n	8002f80 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d103      	bne.n	8002f62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fb64 	bl	8003628 <vPortFree>
	}
 8002f60:	e00e      	b.n	8002f80 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d009      	beq.n	8002f80 <prvDeleteTCB+0x54>
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	e7fe      	b.n	8002f7e <prvDeleteTCB+0x52>
	}
 8002f80:	bf00      	nop
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f8e:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <prvResetNextTaskUnblockTime+0x44>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <prvResetNextTaskUnblockTime+0x14>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <prvResetNextTaskUnblockTime+0x16>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d004      	beq.n	8002fac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <prvResetNextTaskUnblockTime+0x48>)
 8002fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fa8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002faa:	e008      	b.n	8002fbe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fac:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <prvResetNextTaskUnblockTime+0x44>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <prvResetNextTaskUnblockTime+0x48>)
 8002fbc:	6013      	str	r3, [r2, #0]
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	200000e0 	.word	0x200000e0
 8002fd0:	20000148 	.word	0x20000148

08002fd4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fe4:	4b28      	ldr	r3, [pc, #160]	; (8003088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fb17 	bl	800261e <uxListRemove>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	4b21      	ldr	r3, [pc, #132]	; (800308c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4013      	ands	r3, r2
 800300a:	4a20      	ldr	r2, [pc, #128]	; (800308c <prvAddCurrentTaskToDelayedList+0xb8>)
 800300c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003014:	d10a      	bne.n	800302c <prvAddCurrentTaskToDelayedList+0x58>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3304      	adds	r3, #4
 8003022:	4619      	mov	r1, r3
 8003024:	481a      	ldr	r0, [pc, #104]	; (8003090 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003026:	f7ff fa9d 	bl	8002564 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800302a:	e026      	b.n	800307a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003034:	4b14      	ldr	r3, [pc, #80]	; (8003088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	429a      	cmp	r2, r3
 8003042:	d209      	bcs.n	8003058 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003044:	4b13      	ldr	r3, [pc, #76]	; (8003094 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3304      	adds	r3, #4
 800304e:	4619      	mov	r1, r3
 8003050:	4610      	mov	r0, r2
 8003052:	f7ff faab 	bl	80025ac <vListInsert>
}
 8003056:	e010      	b.n	800307a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <prvAddCurrentTaskToDelayedList+0xc4>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3304      	adds	r3, #4
 8003062:	4619      	mov	r1, r3
 8003064:	4610      	mov	r0, r2
 8003066:	f7ff faa1 	bl	80025ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800306a:	4b0c      	ldr	r3, [pc, #48]	; (800309c <prvAddCurrentTaskToDelayedList+0xc8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	429a      	cmp	r2, r3
 8003072:	d202      	bcs.n	800307a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003074:	4a09      	ldr	r2, [pc, #36]	; (800309c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6013      	str	r3, [r2, #0]
}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2000012c 	.word	0x2000012c
 8003088:	20000028 	.word	0x20000028
 800308c:	20000130 	.word	0x20000130
 8003090:	20000114 	.word	0x20000114
 8003094:	200000e4 	.word	0x200000e4
 8003098:	200000e0 	.word	0x200000e0
 800309c:	20000148 	.word	0x20000148

080030a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3b04      	subs	r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3b04      	subs	r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f023 0201 	bic.w	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3b04      	subs	r3, #4
 80030ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030d0:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <pxPortInitialiseStack+0x64>)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3b14      	subs	r3, #20
 80030da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3b04      	subs	r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f06f 0202 	mvn.w	r2, #2
 80030ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3b20      	subs	r3, #32
 80030f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80030f6:	68fb      	ldr	r3, [r7, #12]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	08003109 	.word	0x08003109

08003108 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003112:	4b11      	ldr	r3, [pc, #68]	; (8003158 <prvTaskExitError+0x50>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800311a:	d009      	beq.n	8003130 <prvTaskExitError+0x28>
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e7fe      	b.n	800312e <prvTaskExitError+0x26>
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003142:	bf00      	nop
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0fc      	beq.n	8003144 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000004 	.word	0x20000004
 800315c:	00000000 	.word	0x00000000

08003160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003160:	4b07      	ldr	r3, [pc, #28]	; (8003180 <pxCurrentTCBConst2>)
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	6808      	ldr	r0, [r1, #0]
 8003166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800316a:	f380 8809 	msr	PSP, r0
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f380 8811 	msr	BASEPRI, r0
 800317a:	4770      	bx	lr
 800317c:	f3af 8000 	nop.w

08003180 <pxCurrentTCBConst2>:
 8003180:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop

08003188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003188:	4808      	ldr	r0, [pc, #32]	; (80031ac <prvPortStartFirstTask+0x24>)
 800318a:	6800      	ldr	r0, [r0, #0]
 800318c:	6800      	ldr	r0, [r0, #0]
 800318e:	f380 8808 	msr	MSP, r0
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f380 8814 	msr	CONTROL, r0
 800319a:	b662      	cpsie	i
 800319c:	b661      	cpsie	f
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	df00      	svc	0
 80031a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80031aa:	bf00      	nop
 80031ac:	e000ed08 	.word	0xe000ed08

080031b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80031b6:	4b44      	ldr	r3, [pc, #272]	; (80032c8 <xPortStartScheduler+0x118>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a44      	ldr	r2, [pc, #272]	; (80032cc <xPortStartScheduler+0x11c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d109      	bne.n	80031d4 <xPortStartScheduler+0x24>
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	e7fe      	b.n	80031d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031d4:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <xPortStartScheduler+0x118>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3d      	ldr	r2, [pc, #244]	; (80032d0 <xPortStartScheduler+0x120>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d109      	bne.n	80031f2 <xPortStartScheduler+0x42>
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e7fe      	b.n	80031f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031f2:	4b38      	ldr	r3, [pc, #224]	; (80032d4 <xPortStartScheduler+0x124>)
 80031f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	22ff      	movs	r2, #255	; 0xff
 8003202:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003214:	b2da      	uxtb	r2, r3
 8003216:	4b30      	ldr	r3, [pc, #192]	; (80032d8 <xPortStartScheduler+0x128>)
 8003218:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800321a:	4b30      	ldr	r3, [pc, #192]	; (80032dc <xPortStartScheduler+0x12c>)
 800321c:	2207      	movs	r2, #7
 800321e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003220:	e009      	b.n	8003236 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003222:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <xPortStartScheduler+0x12c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3b01      	subs	r3, #1
 8003228:	4a2c      	ldr	r2, [pc, #176]	; (80032dc <xPortStartScheduler+0x12c>)
 800322a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323e:	2b80      	cmp	r3, #128	; 0x80
 8003240:	d0ef      	beq.n	8003222 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003242:	4b26      	ldr	r3, [pc, #152]	; (80032dc <xPortStartScheduler+0x12c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1c3 0307 	rsb	r3, r3, #7
 800324a:	2b04      	cmp	r3, #4
 800324c:	d009      	beq.n	8003262 <xPortStartScheduler+0xb2>
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	e7fe      	b.n	8003260 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003262:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <xPortStartScheduler+0x12c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <xPortStartScheduler+0x12c>)
 800326a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800326c:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <xPortStartScheduler+0x12c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <xPortStartScheduler+0x12c>)
 8003276:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003280:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <xPortStartScheduler+0x130>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <xPortStartScheduler+0x130>)
 8003286:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800328a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <xPortStartScheduler+0x130>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <xPortStartScheduler+0x130>)
 8003292:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003296:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003298:	f000 f8d6 	bl	8003448 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <xPortStartScheduler+0x134>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80032a2:	f000 f8f5 	bl	8003490 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <xPortStartScheduler+0x138>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <xPortStartScheduler+0x138>)
 80032ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80032b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80032b2:	f7ff ff69 	bl	8003188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80032b6:	f7ff fd5b 	bl	8002d70 <vTaskSwitchContext>
	prvTaskExitError();
 80032ba:	f7ff ff25 	bl	8003108 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	e000ed00 	.word	0xe000ed00
 80032cc:	410fc271 	.word	0x410fc271
 80032d0:	410fc270 	.word	0x410fc270
 80032d4:	e000e400 	.word	0xe000e400
 80032d8:	20000154 	.word	0x20000154
 80032dc:	20000158 	.word	0x20000158
 80032e0:	e000ed20 	.word	0xe000ed20
 80032e4:	20000004 	.word	0x20000004
 80032e8:	e000ef34 	.word	0xe000ef34

080032ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003304:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <vPortEnterCritical+0x54>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <vPortEnterCritical+0x54>)
 800330c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <vPortEnterCritical+0x54>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d10e      	bne.n	8003334 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <vPortEnterCritical+0x58>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <vPortEnterCritical+0x48>
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	e7fe      	b.n	8003332 <vPortEnterCritical+0x46>
	}
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	20000004 	.word	0x20000004
 8003344:	e000ed04 	.word	0xe000ed04

08003348 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <vPortExitCritical+0x4c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <vPortExitCritical+0x22>
 8003356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	e7fe      	b.n	8003368 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <vPortExitCritical+0x4c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3b01      	subs	r3, #1
 8003370:	4a08      	ldr	r2, [pc, #32]	; (8003394 <vPortExitCritical+0x4c>)
 8003372:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <vPortExitCritical+0x4c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <vPortExitCritical+0x3e>
 800337c:	2300      	movs	r3, #0
 800337e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000004 	.word	0x20000004
	...

080033a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80033a0:	f3ef 8009 	mrs	r0, PSP
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	4b15      	ldr	r3, [pc, #84]	; (8003400 <pxCurrentTCBConst>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	f01e 0f10 	tst.w	lr, #16
 80033b0:	bf08      	it	eq
 80033b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80033b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ba:	6010      	str	r0, [r2, #0]
 80033bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80033c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80033c4:	f380 8811 	msr	BASEPRI, r0
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f7ff fcce 	bl	8002d70 <vTaskSwitchContext>
 80033d4:	f04f 0000 	mov.w	r0, #0
 80033d8:	f380 8811 	msr	BASEPRI, r0
 80033dc:	bc09      	pop	{r0, r3}
 80033de:	6819      	ldr	r1, [r3, #0]
 80033e0:	6808      	ldr	r0, [r1, #0]
 80033e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e6:	f01e 0f10 	tst.w	lr, #16
 80033ea:	bf08      	it	eq
 80033ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80033f0:	f380 8809 	msr	PSP, r0
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	f3af 8000 	nop.w

08003400 <pxCurrentTCBConst>:
 8003400:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop

08003408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
	__asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003420:	f7ff fbea 	bl	8002bf8 <xTaskIncrementTick>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <SysTick_Handler+0x3c>)
 800342c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	2300      	movs	r3, #0
 8003434:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <vPortSetupTimerInterrupt+0x34>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003452:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <vPortSetupTimerInterrupt+0x38>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <vPortSetupTimerInterrupt+0x3c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <vPortSetupTimerInterrupt+0x40>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	099b      	lsrs	r3, r3, #6
 8003464:	4a09      	ldr	r2, [pc, #36]	; (800348c <vPortSetupTimerInterrupt+0x44>)
 8003466:	3b01      	subs	r3, #1
 8003468:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <vPortSetupTimerInterrupt+0x34>)
 800346c:	2207      	movs	r2, #7
 800346e:	601a      	str	r2, [r3, #0]
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e010 	.word	0xe000e010
 8003480:	e000e018 	.word	0xe000e018
 8003484:	20000008 	.word	0x20000008
 8003488:	10624dd3 	.word	0x10624dd3
 800348c:	e000e014 	.word	0xe000e014

08003490 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003490:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80034a0 <vPortEnableVFP+0x10>
 8003494:	6801      	ldr	r1, [r0, #0]
 8003496:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800349a:	6001      	str	r1, [r0, #0]
 800349c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800349e:	bf00      	nop
 80034a0:	e000ed88 	.word	0xe000ed88

080034a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80034b0:	f7ff faf8 	bl	8002aa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80034b4:	4b57      	ldr	r3, [pc, #348]	; (8003614 <pvPortMalloc+0x170>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80034bc:	f000 f90c 	bl	80036d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80034c0:	4b55      	ldr	r3, [pc, #340]	; (8003618 <pvPortMalloc+0x174>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f040 808c 	bne.w	80035e6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01c      	beq.n	800350e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80034d4:	2208      	movs	r2, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d013      	beq.n	800350e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f023 0307 	bic.w	r3, r3, #7
 80034ec:	3308      	adds	r3, #8
 80034ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <pvPortMalloc+0x6a>
	__asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e7fe      	b.n	800350c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d068      	beq.n	80035e6 <pvPortMalloc+0x142>
 8003514:	4b41      	ldr	r3, [pc, #260]	; (800361c <pvPortMalloc+0x178>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d863      	bhi.n	80035e6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800351e:	4b40      	ldr	r3, [pc, #256]	; (8003620 <pvPortMalloc+0x17c>)
 8003520:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003522:	4b3f      	ldr	r3, [pc, #252]	; (8003620 <pvPortMalloc+0x17c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003528:	e004      	b.n	8003534 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	d903      	bls.n	8003546 <pvPortMalloc+0xa2>
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f1      	bne.n	800352a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003546:	4b33      	ldr	r3, [pc, #204]	; (8003614 <pvPortMalloc+0x170>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354c:	429a      	cmp	r2, r3
 800354e:	d04a      	beq.n	80035e6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2208      	movs	r2, #8
 8003556:	4413      	add	r3, r2
 8003558:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	1ad2      	subs	r2, r2, r3
 800356a:	2308      	movs	r3, #8
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	429a      	cmp	r2, r3
 8003570:	d91e      	bls.n	80035b0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <pvPortMalloc+0xf4>
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	e7fe      	b.n	8003596 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	1ad2      	subs	r2, r2, r3
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80035aa:	69b8      	ldr	r0, [r7, #24]
 80035ac:	f000 f8f6 	bl	800379c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <pvPortMalloc+0x178>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	4a18      	ldr	r2, [pc, #96]	; (800361c <pvPortMalloc+0x178>)
 80035bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80035be:	4b17      	ldr	r3, [pc, #92]	; (800361c <pvPortMalloc+0x178>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4b18      	ldr	r3, [pc, #96]	; (8003624 <pvPortMalloc+0x180>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d203      	bcs.n	80035d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80035ca:	4b14      	ldr	r3, [pc, #80]	; (800361c <pvPortMalloc+0x178>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a15      	ldr	r2, [pc, #84]	; (8003624 <pvPortMalloc+0x180>)
 80035d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <pvPortMalloc+0x174>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	431a      	orrs	r2, r3
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80035e6:	f7ff fa6b 	bl	8002ac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <pvPortMalloc+0x164>
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	e7fe      	b.n	8003606 <pvPortMalloc+0x162>
	return pvReturn;
 8003608:	69fb      	ldr	r3, [r7, #28]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3728      	adds	r7, #40	; 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20003d64 	.word	0x20003d64
 8003618:	20003d70 	.word	0x20003d70
 800361c:	20003d68 	.word	0x20003d68
 8003620:	20003d5c 	.word	0x20003d5c
 8003624:	20003d6c 	.word	0x20003d6c

08003628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d046      	beq.n	80036c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800363a:	2308      	movs	r3, #8
 800363c:	425b      	negs	r3, r3
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4413      	add	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <vPortFree+0xa8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <vPortFree+0x42>
 8003656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365a:	f383 8811 	msr	BASEPRI, r3
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e7fe      	b.n	8003668 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <vPortFree+0x5e>
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	e7fe      	b.n	8003684 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <vPortFree+0xa8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d019      	beq.n	80036c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d115      	bne.n	80036c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <vPortFree+0xa8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	401a      	ands	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80036ac:	f7ff f9fa 	bl	8002aa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <vPortFree+0xac>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4413      	add	r3, r2
 80036ba:	4a06      	ldr	r2, [pc, #24]	; (80036d4 <vPortFree+0xac>)
 80036bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80036be:	6938      	ldr	r0, [r7, #16]
 80036c0:	f000 f86c 	bl	800379c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80036c4:	f7ff f9fc 	bl	8002ac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80036c8:	bf00      	nop
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20003d70 	.word	0x20003d70
 80036d4:	20003d68 	.word	0x20003d68

080036d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036de:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80036e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80036e4:	4b27      	ldr	r3, [pc, #156]	; (8003784 <prvHeapInit+0xac>)
 80036e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00c      	beq.n	800370c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3307      	adds	r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0307 	bic.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	4a1f      	ldr	r2, [pc, #124]	; (8003784 <prvHeapInit+0xac>)
 8003708:	4413      	add	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <prvHeapInit+0xb0>)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003716:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <prvHeapInit+0xb0>)
 8003718:	2200      	movs	r2, #0
 800371a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4413      	add	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003724:	2208      	movs	r2, #8
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0307 	bic.w	r3, r3, #7
 8003732:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a15      	ldr	r2, [pc, #84]	; (800378c <prvHeapInit+0xb4>)
 8003738:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800373a:	4b14      	ldr	r3, [pc, #80]	; (800378c <prvHeapInit+0xb4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2200      	movs	r2, #0
 8003740:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <prvHeapInit+0xb4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	1ad2      	subs	r2, r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <prvHeapInit+0xb4>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <prvHeapInit+0xb8>)
 8003766:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a09      	ldr	r2, [pc, #36]	; (8003794 <prvHeapInit+0xbc>)
 800376e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <prvHeapInit+0xc0>)
 8003772:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003776:	601a      	str	r2, [r3, #0]
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	2000015c 	.word	0x2000015c
 8003788:	20003d5c 	.word	0x20003d5c
 800378c:	20003d64 	.word	0x20003d64
 8003790:	20003d6c 	.word	0x20003d6c
 8003794:	20003d68 	.word	0x20003d68
 8003798:	20003d70 	.word	0x20003d70

0800379c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037a4:	4b28      	ldr	r3, [pc, #160]	; (8003848 <prvInsertBlockIntoFreeList+0xac>)
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e002      	b.n	80037b0 <prvInsertBlockIntoFreeList+0x14>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d8f7      	bhi.n	80037aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	4413      	add	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d108      	bne.n	80037de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	441a      	add	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	441a      	add	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d118      	bne.n	8003824 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <prvInsertBlockIntoFreeList+0xb0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d00d      	beq.n	800381a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	441a      	add	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e008      	b.n	800382c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800381a:	4b0c      	ldr	r3, [pc, #48]	; (800384c <prvInsertBlockIntoFreeList+0xb0>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e003      	b.n	800382c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d002      	beq.n	800383a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20003d5c 	.word	0x20003d5c
 800384c:	20003d64 	.word	0x20003d64

08003850 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a07      	ldr	r2, [pc, #28]	; (800387c <vApplicationGetIdleTaskMemory+0x2c>)
 8003860:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4a06      	ldr	r2, [pc, #24]	; (8003880 <vApplicationGetIdleTaskMemory+0x30>)
 8003866:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20003d74 	.word	0x20003d74
 8003880:	20003dc8 	.word	0x20003dc8

08003884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003884:	b5b0      	push	{r4, r5, r7, lr}
 8003886:	b096      	sub	sp, #88	; 0x58
 8003888:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800388a:	f7fc fe41 	bl	8000510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800388e:	f000 f84b 	bl	8003928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003892:	f000 f921 	bl	8003ad8 <MX_GPIO_Init>
  MX_RTC_Init();
 8003896:	f000 f8c5 	bl	8003a24 <MX_RTC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <main+0x8c>)
 800389c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80038a0:	461d      	mov	r5, r3
 80038a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80038ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe fdc8 	bl	800244a <osThreadCreate>
 80038ba:	4602      	mov	r2, r0
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <main+0x90>)
 80038be:	601a      	str	r2, [r3, #0]

  /* definition and creation of CommunicationTa */
  osThreadDef(CommunicationTa, StartTaskCommunication, osPriorityNormal, 0, 128);
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <main+0x94>)
 80038c2:	f107 0420 	add.w	r4, r7, #32
 80038c6:	461d      	mov	r5, r3
 80038c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommunicationTaHandle = osThreadCreate(osThread(CommunicationTa), NULL);
 80038d4:	f107 0320 	add.w	r3, r7, #32
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fdb5 	bl	800244a <osThreadCreate>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <main+0x98>)
 80038e4:	601a      	str	r2, [r3, #0]

  /* definition and creation of SupverVisiorTas */
  osThreadDef(SupverVisiorTas, StartTaskSuperVisior, osPriorityIdle, 0, 128);
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <main+0x9c>)
 80038e8:	1d3c      	adds	r4, r7, #4
 80038ea:	461d      	mov	r5, r3
 80038ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SupverVisiorTasHandle = osThreadCreate(osThread(SupverVisiorTas), NULL);
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe fda4 	bl	800244a <osThreadCreate>
 8003902:	4602      	mov	r2, r0
 8003904:	4b07      	ldr	r3, [pc, #28]	; (8003924 <main+0xa0>)
 8003906:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003908:	f7fe fd98 	bl	800243c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800390c:	e7fe      	b.n	800390c <main+0x88>
 800390e:	bf00      	nop
 8003910:	08003fe4 	.word	0x08003fe4
 8003914:	20003fcc 	.word	0x20003fcc
 8003918:	08004010 	.word	0x08004010
 800391c:	20003ff4 	.word	0x20003ff4
 8003920:	0800403c 	.word	0x0800403c
 8003924:	20003fd0 	.word	0x20003fd0

08003928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b0ac      	sub	sp, #176	; 0xb0
 800392c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800392e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003932:	2234      	movs	r2, #52	; 0x34
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fb36 	bl	8003fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800393c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800394c:	f107 030c 	add.w	r3, r7, #12
 8003950:	225c      	movs	r2, #92	; 0x5c
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fb27 	bl	8003fa8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	4b2f      	ldr	r3, [pc, #188]	; (8003a1c <SystemClock_Config+0xf4>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	4a2e      	ldr	r2, [pc, #184]	; (8003a1c <SystemClock_Config+0xf4>)
 8003964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003968:	6413      	str	r3, [r2, #64]	; 0x40
 800396a:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <SystemClock_Config+0xf4>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <SystemClock_Config+0xf8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003982:	4a27      	ldr	r2, [pc, #156]	; (8003a20 <SystemClock_Config+0xf8>)
 8003984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b25      	ldr	r3, [pc, #148]	; (8003a20 <SystemClock_Config+0xf8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003992:	607b      	str	r3, [r7, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003996:	230a      	movs	r3, #10
 8003998:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039a6:	2310      	movs	r3, #16
 80039a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80039ac:	2301      	movs	r3, #1
 80039ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd fe27 	bl	8001610 <HAL_RCC_OscConfig>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80039c8:	f000 f9a4 	bl	8003d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039cc:	230f      	movs	r3, #15
 80039ce:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80039d0:	2300      	movs	r3, #0
 80039d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039d4:	2300      	movs	r3, #0
 80039d6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039d8:	2300      	movs	r3, #0
 80039da:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039dc:	2300      	movs	r3, #0
 80039de:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80039e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd f862 	bl	8000ab0 <HAL_RCC_ClockConfig>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80039f2:	f000 f98f 	bl	8003d14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80039f6:	2320      	movs	r3, #32
 80039f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80039fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fd f987 	bl	8000d18 <HAL_RCCEx_PeriphCLKConfig>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8003a10:	f000 f980 	bl	8003d14 <Error_Handler>
  }
}
 8003a14:	bf00      	nop
 8003a16:	37b0      	adds	r7, #176	; 0xb0
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40007000 	.word	0x40007000

08003a24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003a2a:	1d3b      	adds	r3, r7, #4
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	60da      	str	r2, [r3, #12]
 8003a36:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003a38:	2300      	movs	r3, #0
 8003a3a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8003a3c:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <MX_RTC_Init+0xac>)
 8003a3e:	4a25      	ldr	r2, [pc, #148]	; (8003ad4 <MX_RTC_Init+0xb0>)
 8003a40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <MX_RTC_Init+0xac>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003a48:	4b21      	ldr	r3, [pc, #132]	; (8003ad0 <MX_RTC_Init+0xac>)
 8003a4a:	227f      	movs	r2, #127	; 0x7f
 8003a4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <MX_RTC_Init+0xac>)
 8003a50:	22ff      	movs	r2, #255	; 0xff
 8003a52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a54:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <MX_RTC_Init+0xac>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <MX_RTC_Init+0xac>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <MX_RTC_Init+0xac>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a66:	481a      	ldr	r0, [pc, #104]	; (8003ad0 <MX_RTC_Init+0xac>)
 8003a68:	f7fe f82c 	bl	8001ac4 <HAL_RTC_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003a72:	f000 f94f 	bl	8003d14 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	4619      	mov	r1, r3
 8003a90:	480f      	ldr	r0, [pc, #60]	; (8003ad0 <MX_RTC_Init+0xac>)
 8003a92:	f7fe f8a8 	bl	8001be6 <HAL_RTC_SetTime>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003a9c:	f000 f93a 	bl	8003d14 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4806      	ldr	r0, [pc, #24]	; (8003ad0 <MX_RTC_Init+0xac>)
 8003ab8:	f7fe f952 	bl	8001d60 <HAL_RTC_SetDate>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003ac2:	f000 f927 	bl	8003d14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003ac6:	bf00      	nop
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20003fd4 	.word	0x20003fd4
 8003ad4:	40002800 	.word	0x40002800

08003ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	; 0x28
 8003adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ade:	f107 0314 	add.w	r3, r7, #20
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	609a      	str	r2, [r3, #8]
 8003aea:	60da      	str	r2, [r3, #12]
 8003aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	4b6f      	ldr	r3, [pc, #444]	; (8003cb0 <MX_GPIO_Init+0x1d8>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4a6e      	ldr	r2, [pc, #440]	; (8003cb0 <MX_GPIO_Init+0x1d8>)
 8003af8:	f043 0304 	orr.w	r3, r3, #4
 8003afc:	6313      	str	r3, [r2, #48]	; 0x30
 8003afe:	4b6c      	ldr	r3, [pc, #432]	; (8003cb0 <MX_GPIO_Init+0x1d8>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	4b68      	ldr	r3, [pc, #416]	; (8003cb0 <MX_GPIO_Init+0x1d8>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	4a67      	ldr	r2, [pc, #412]	; (8003cb0 <MX_GPIO_Init+0x1d8>)
 8003b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b18:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1a:	4b65      	ldr	r3, [pc, #404]	; (8003cb0 <MX_GPIO_Init+0x1d8>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <MX_GPIO_Init+0x1d8>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	4a60      	ldr	r2, [pc, #384]	; (8003cb0 <MX_GPIO_Init+0x1d8>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6313      	str	r3, [r2, #48]	; 0x30
 8003b36:	4b5e      	ldr	r3, [pc, #376]	; (8003cb0 <MX_GPIO_Init+0x1d8>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	4b5a      	ldr	r3, [pc, #360]	; (8003cb0 <MX_GPIO_Init+0x1d8>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	4a59      	ldr	r2, [pc, #356]	; (8003cb0 <MX_GPIO_Init+0x1d8>)
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	6313      	str	r3, [r2, #48]	; 0x30
 8003b52:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <MX_GPIO_Init+0x1d8>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	607b      	str	r3, [r7, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_4 
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f246 31d2 	movw	r1, #25554	; 0x63d2
 8003b64:	4853      	ldr	r0, [pc, #332]	; (8003cb4 <MX_GPIO_Init+0x1dc>)
 8003b66:	f7fc ff89 	bl	8000a7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2105      	movs	r1, #5
 8003b6e:	4852      	ldr	r0, [pc, #328]	; (8003cb8 <MX_GPIO_Init+0x1e0>)
 8003b70:	f7fc ff84 	bl	8000a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8003b74:	2200      	movs	r2, #0
 8003b76:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 8003b7a:	4850      	ldr	r0, [pc, #320]	; (8003cbc <MX_GPIO_Init+0x1e4>)
 8003b7c:	f7fc ff7e 	bl	8000a7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC1 PC4 
                           PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_4 
 8003b80:	f246 33d2 	movw	r3, #25554	; 0x63d2
 8003b84:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b92:	f107 0314 	add.w	r3, r7, #20
 8003b96:	4619      	mov	r1, r3
 8003b98:	4846      	ldr	r0, [pc, #280]	; (8003cb4 <MX_GPIO_Init+0x1dc>)
 8003b9a:	f7fc fddd 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003baa:	2300      	movs	r3, #0
 8003bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bae:	f107 0314 	add.w	r3, r7, #20
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4840      	ldr	r0, [pc, #256]	; (8003cb8 <MX_GPIO_Init+0x1e0>)
 8003bb6:	f7fc fdcf 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8003bba:	f649 6308 	movw	r3, #40456	; 0x9e08
 8003bbe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc8:	f107 0314 	add.w	r3, r7, #20
 8003bcc:	4619      	mov	r1, r3
 8003bce:	483a      	ldr	r0, [pc, #232]	; (8003cb8 <MX_GPIO_Init+0x1e0>)
 8003bd0:	f7fc fdc2 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003bd4:	23f0      	movs	r3, #240	; 0xf0
 8003bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be0:	2303      	movs	r3, #3
 8003be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003be4:	2305      	movs	r3, #5
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4619      	mov	r1, r3
 8003bee:	4832      	ldr	r0, [pc, #200]	; (8003cb8 <MX_GPIO_Init+0x1e0>)
 8003bf0:	f7fc fdb2 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c00:	2303      	movs	r3, #3
 8003c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c04:	2307      	movs	r3, #7
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4829      	ldr	r0, [pc, #164]	; (8003cb4 <MX_GPIO_Init+0x1dc>)
 8003c10:	f7fc fda2 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c14:	2304      	movs	r3, #4
 8003c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	4619      	mov	r1, r3
 8003c26:	4825      	ldr	r0, [pc, #148]	; (8003cbc <MX_GPIO_Init+0x1e4>)
 8003c28:	f7fc fd96 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c32:	2302      	movs	r3, #2
 8003c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c3e:	2307      	movs	r3, #7
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	4619      	mov	r1, r3
 8003c48:	481c      	ldr	r0, [pc, #112]	; (8003cbc <MX_GPIO_Init+0x1e4>)
 8003c4a:	f7fc fd85 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8003c4e:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 8003c52:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c54:	2301      	movs	r3, #1
 8003c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c60:	f107 0314 	add.w	r3, r7, #20
 8003c64:	4619      	mov	r1, r3
 8003c66:	4815      	ldr	r0, [pc, #84]	; (8003cbc <MX_GPIO_Init+0x1e4>)
 8003c68:	f7fc fd76 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003c6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c7a:	f107 0314 	add.w	r3, r7, #20
 8003c7e:	4619      	mov	r1, r3
 8003c80:	480c      	ldr	r0, [pc, #48]	; (8003cb4 <MX_GPIO_Init+0x1dc>)
 8003c82:	f7fc fd69 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c8c:	2312      	movs	r3, #18
 8003c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c90:	2301      	movs	r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c94:	2303      	movs	r3, #3
 8003c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c98:	2304      	movs	r3, #4
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c9c:	f107 0314 	add.w	r3, r7, #20
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4806      	ldr	r0, [pc, #24]	; (8003cbc <MX_GPIO_Init+0x1e4>)
 8003ca4:	f7fc fd58 	bl	8000758 <HAL_GPIO_Init>

}
 8003ca8:	bf00      	nop
 8003caa:	3728      	adds	r7, #40	; 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40020800 	.word	0x40020800
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	40020400 	.word	0x40020400

08003cc0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f7fe fc0a 	bl	80024e2 <osDelay>
 8003cce:	e7fb      	b.n	8003cc8 <StartDefaultTask+0x8>

08003cd0 <StartTaskCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCommunication */
void StartTaskCommunication(void const * argument)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCommunication */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f7fe fc02 	bl	80024e2 <osDelay>
 8003cde:	e7fb      	b.n	8003cd8 <StartTaskCommunication+0x8>

08003ce0 <StartTaskSuperVisior>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSuperVisior */
void StartTaskSuperVisior(void const * argument)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSuperVisior */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7fe fbfa 	bl	80024e2 <osDelay>
 8003cee:	e7fb      	b.n	8003ce8 <StartTaskSuperVisior+0x8>

08003cf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003d02:	f7fc fc27 	bl	8000554 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40010000 	.word	0x40010000

08003d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <HAL_MspInit+0x54>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	4a11      	ldr	r2, [pc, #68]	; (8003d78 <HAL_MspInit+0x54>)
 8003d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d38:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3a:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <HAL_MspInit+0x54>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_MspInit+0x54>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <HAL_MspInit+0x54>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_MspInit+0x54>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d62:	2200      	movs	r2, #0
 8003d64:	210f      	movs	r1, #15
 8003d66:	f06f 0001 	mvn.w	r0, #1
 8003d6a:	f7fc fccb 	bl	8000704 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800

08003d7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <HAL_RTC_MspInit+0x24>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d102      	bne.n	8003d94 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_RTC_MspInit+0x28>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40002800 	.word	0x40002800
 8003da4:	42470e3c 	.word	0x42470e3c

08003da8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08c      	sub	sp, #48	; 0x30
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8003db8:	2200      	movs	r2, #0
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	2019      	movs	r0, #25
 8003dbe:	f7fc fca1 	bl	8000704 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8003dc2:	2019      	movs	r0, #25
 8003dc4:	f7fc fcba 	bl	800073c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <HAL_InitTick+0xa0>)
 8003dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd0:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <HAL_InitTick+0xa0>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <HAL_InitTick+0xa0>)
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003de4:	f107 0210 	add.w	r2, r7, #16
 8003de8:	f107 0314 	add.w	r3, r7, #20
 8003dec:	4611      	mov	r1, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fc ff60 	bl	8000cb4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003df4:	f7fc ff4a 	bl	8000c8c <HAL_RCC_GetPCLK2Freq>
 8003df8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <HAL_InitTick+0xa4>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	0c9b      	lsrs	r3, r3, #18
 8003e04:	3b01      	subs	r3, #1
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_InitTick+0xa8>)
 8003e0a:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <HAL_InitTick+0xac>)
 8003e0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <HAL_InitTick+0xa8>)
 8003e10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003e16:	4a0e      	ldr	r2, [pc, #56]	; (8003e50 <HAL_InitTick+0xa8>)
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <HAL_InitTick+0xa8>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e22:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_InitTick+0xa8>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003e28:	4809      	ldr	r0, [pc, #36]	; (8003e50 <HAL_InitTick+0xa8>)
 8003e2a:	f7fe f8b2 	bl	8001f92 <HAL_TIM_Base_Init>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003e34:	4806      	ldr	r0, [pc, #24]	; (8003e50 <HAL_InitTick+0xa8>)
 8003e36:	f7fe f8e1 	bl	8001ffc <HAL_TIM_Base_Start_IT>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	e000      	b.n	8003e40 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3730      	adds	r7, #48	; 0x30
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	431bde83 	.word	0x431bde83
 8003e50:	20003ff8 	.word	0x20003ff8
 8003e54:	40010000 	.word	0x40010000

08003e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e66:	b480      	push	{r7}
 8003e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e6a:	e7fe      	b.n	8003e6a <HardFault_Handler+0x4>

08003e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e70:	e7fe      	b.n	8003e70 <MemManage_Handler+0x4>

08003e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e76:	e7fe      	b.n	8003e76 <BusFault_Handler+0x4>

08003e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e7c:	e7fe      	b.n	8003e7c <UsageFault_Handler+0x4>

08003e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e90:	4802      	ldr	r0, [pc, #8]	; (8003e9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003e92:	f7fe f8d7 	bl	8002044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20003ff8 	.word	0x20003ff8

08003ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ea4:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <SystemInit+0x60>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	4a15      	ldr	r2, [pc, #84]	; (8003f00 <SystemInit+0x60>)
 8003eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003eb4:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <SystemInit+0x64>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <SystemInit+0x64>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ec0:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <SystemInit+0x64>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <SystemInit+0x64>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a0e      	ldr	r2, [pc, #56]	; (8003f04 <SystemInit+0x64>)
 8003ecc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <SystemInit+0x64>)
 8003ed8:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <SystemInit+0x68>)
 8003eda:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <SystemInit+0x64>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <SystemInit+0x64>)
 8003ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <SystemInit+0x64>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <SystemInit+0x60>)
 8003ef0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ef4:	609a      	str	r2, [r3, #8]
#endif
}
 8003ef6:	bf00      	nop
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	e000ed00 	.word	0xe000ed00
 8003f04:	40023800 	.word	0x40023800
 8003f08:	24003010 	.word	0x24003010

08003f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f12:	e003      	b.n	8003f1c <LoopCopyDataInit>

08003f14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f1a:	3104      	adds	r1, #4

08003f1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f1c:	480b      	ldr	r0, [pc, #44]	; (8003f4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f1e:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f24:	d3f6      	bcc.n	8003f14 <CopyDataInit>
  ldr  r2, =_sbss
 8003f26:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f28:	e002      	b.n	8003f30 <LoopFillZerobss>

08003f2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f2c:	f842 3b04 	str.w	r3, [r2], #4

08003f30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f34:	d3f9      	bcc.n	8003f2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f36:	f7ff ffb3 	bl	8003ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f3a:	f000 f811 	bl	8003f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f3e:	f7ff fca1 	bl	8003884 <main>
  bx  lr    
 8003f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003f48:	08004080 	.word	0x08004080
  ldr  r0, =_sdata
 8003f4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f50:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003f54:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003f58:	20004038 	.word	0x20004038

08003f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f5c:	e7fe      	b.n	8003f5c <ADC_IRQHandler>
	...

08003f60 <__libc_init_array>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	4e0d      	ldr	r6, [pc, #52]	; (8003f98 <__libc_init_array+0x38>)
 8003f64:	4c0d      	ldr	r4, [pc, #52]	; (8003f9c <__libc_init_array+0x3c>)
 8003f66:	1ba4      	subs	r4, r4, r6
 8003f68:	10a4      	asrs	r4, r4, #2
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	42a5      	cmp	r5, r4
 8003f6e:	d109      	bne.n	8003f84 <__libc_init_array+0x24>
 8003f70:	4e0b      	ldr	r6, [pc, #44]	; (8003fa0 <__libc_init_array+0x40>)
 8003f72:	4c0c      	ldr	r4, [pc, #48]	; (8003fa4 <__libc_init_array+0x44>)
 8003f74:	f000 f820 	bl	8003fb8 <_init>
 8003f78:	1ba4      	subs	r4, r4, r6
 8003f7a:	10a4      	asrs	r4, r4, #2
 8003f7c:	2500      	movs	r5, #0
 8003f7e:	42a5      	cmp	r5, r4
 8003f80:	d105      	bne.n	8003f8e <__libc_init_array+0x2e>
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f88:	4798      	blx	r3
 8003f8a:	3501      	adds	r5, #1
 8003f8c:	e7ee      	b.n	8003f6c <__libc_init_array+0xc>
 8003f8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f92:	4798      	blx	r3
 8003f94:	3501      	adds	r5, #1
 8003f96:	e7f2      	b.n	8003f7e <__libc_init_array+0x1e>
 8003f98:	08004078 	.word	0x08004078
 8003f9c:	08004078 	.word	0x08004078
 8003fa0:	08004078 	.word	0x08004078
 8003fa4:	0800407c 	.word	0x0800407c

08003fa8 <memset>:
 8003fa8:	4402      	add	r2, r0
 8003faa:	4603      	mov	r3, r0
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d100      	bne.n	8003fb2 <memset+0xa>
 8003fb0:	4770      	bx	lr
 8003fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb6:	e7f9      	b.n	8003fac <memset+0x4>

08003fb8 <_init>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	bf00      	nop
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr

08003fc4 <_fini>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr
